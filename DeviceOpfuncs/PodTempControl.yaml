APPNAME: POD
VERSION: v0.2.3

################################### ENUMS & BITMASKS #################################################-
ENUMS:
- MotorErrorCode:
  - desc : Motor error code
  - type : UInt16
  - value:
    - mecodeNone : [0, No Error]
    - mecodeInvalidID : [1, Invalid Motor ID]
    - mecodeLowerLimit : [2, Motor hit Lower Limit switch]
    - mecodeUpperLimit : [3, Motor hit Upper Limit switch]
    - mecodeIllegalPos : [4, Illegal Position]
    - mecodeIllegalVel : [5, Illegal Velocity]
    - mecodeIllegalAcc : [6, Illegal Acceleration]
    - mecodeAborted : [7, Motor Stopped by Motion Abort]
    - mecodeFolErrorIdle : [8, Encoder doesn't match Motor position while Idle]
    - mecodeFolErrorMoving : [9, Encoder doesn't match Motor position while Moving]
    - mecodeEncoderError : [10, Encoder error]
    - mecodeDisabled : [11, Motor is disabled]
    - mecodeHoming : [12, Motor is homing]
    - mecodeEmergencyStop : [13, Emergency Stop is activated]
    - mecodeHardBrake : [14, Hard Brake is activated]
    - mecodeDriverFault : [15, Motor driver fault signal is triggered]
    - mecNoMove : [16, Motor move to the same position]
    - mecMoveNotSupported : [17, some movement can't b overidden ( s-curve)]
    - mecIllegalJrk : [18, illegal jerk (s-curve)]
    - mecStalled : [19, motor stalled detected using trinamic stallguard]

- MotorStatusBitmask:
  - desc : Bitmask for motor status code (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - msbitMoving : [1, Motor is moving]
    - msbitHoming : [2, Motor is homing]
    - msbitHomed : [4, Motor is already homed]
    - msbitLowerLimit : [8, LowerLimit switch is hit]
    - msbitUpperLimit : [16, UpperLimit switch is hit]
    - msbitOverCurrent : [32, Motor overcurrent]
    - msbitAborted : [64, Motor motion abort is triggered]
    - msbitFolErrorIdle : [128, Following Error while motor is idle]
    - msbitFolErrorMoving : [256, Following Error while motor is moving]
    - msbitEncoderError : [512, Encode Error]
    - msbitDisabled : [1024, Motor is Disabled]
    - msbitEmergencyStop : [2048, Emergency Stop is triggered]
    - msbitHardBrake : [4096, HardBrake is triggered]
    - msbitDriverFault : [8192, Motor driver fault signal is triggered]

- MotorInputBitmask:
  - desc : Bitmask for motor input code (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - mibitHomeSwitch : [1, motor homing switch]
    - mibitLowerLimit : [2, motor lower limit switch]
    - mibitUpperLimit : [4, motor upper limit switch]
    - mibitEnableSwitch : [8, motor enable switch]
    - mibitAbortFlag : [16, motor abort flag]
    - mibitDriverFault : [32, motor driver fault signal]

- LoggerTickBitmask:
  - desc : Bitmask for activation of logger tick (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - logbitIndexActive : [1, Activate logging index]

- LoggerMotorBitmask:
  - desc : Bitmask for activation of motor data logging (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - logbitAdcMotorCurrentA : [1, Raw ADC value of Motor Coil A Current sensor reading (Current = ADCvalue * CurrsensorScale + CurrsensorOffset)]
    - logbitAdcMotorCurrentB : [2, Raw ADC value of Motor Coil B Current sensor reading (Current = ADCvalue * CurrsensorScale + CurrsensorOffset)]
    - logbitMotorCurrentError : [4, PID Current Error (Ampere * 1e4 + 32768)]
    - logbitMotorCurrentSetpoint : [8, PID Current Setpoint (Ampere * 1e4 + 32768)]
    - logbitMotorControlOut : [16, Motor PID total Control output]
    - logbitMotorPwmA : [32, PWM of Motor Coil A]
    - logbitMotorPwmB : [64, PWM of Motor Coil B]
    - logbitMotorVelocity : [128, Velocity of Motor (Velocity * 10  + 32768)]

# - AbortInputBitmask:
  # - desc : Bitmask for activating input of motion abort
  # - type : UInt32
  # - Value:
    # - Motor0Fault : [1, motor 0 fault active high]
    # - Motor1Fault : [2, motor 1 fault active high]
    # - Estop : [4, Estop Signal active low]
    # - TouchOff : [8, Touch off Signal active low]
    # - DoorOpen : [16, Door Open signal active low]
    # - TrashBin : [32, Trash Bin signal active low]
    # - DoorClosed : [64, Door Open signal active low]

# - AbortId:
  # - desc : Id for abort object
  # - type : Int16
  # - Value:
    # - Motor0 : [0, motor 0 it will stop motor with deceleration if aborted]
    # - Motor1 : [1, motor 1 it will stop motor with deceleration if aborted]
    # - Estop : [2, Estop it will give low signal to bus if aborted]
    # - TouchOff : [3, Touch off it will give low signal to bus if aborted]

# - InputMonitorMask:
  # - desc : Bitmask for activating input monitor also value for read input
  # - type : UInt32
  # - Value:
    # - Estop : [1, Estop Signal active low]
    # - TouchOff : [2, Touch off Signal active low]
    # - DoorOpen : [4, Door Open signal active low]
    # - TrashBin : [8, Trash Bin signal active low]
    # - DoorClosed : [16, Door Open signal active low]

################################### COMMANDS #################################################
COMMANDS:
- save_configuration:
  - op  : 3
  - arg : null
  - ret : null
  - desc: Save configuration to EEPROM

- get_dog_alarm:
  - op  : 7
  - arg : null
  - ret : [lastRpc: UInt32, lastPos: UInt32]
  - desc: Get Watchdog Alarm

- reset_dog_alarm:
  - op  : 8
  - arg : null
  - ret : null
  - desc: reset Watchdog Alarm

- reset_firmware:
  - op  : 9
  - arg : null
  - ret : null
  - desc: Reset FW


- set_address:
  - op  : 100
  - arg : [addr : Int16]
  - ret : null
  - desc: Set device address

#---------------------------------------- MOTOR ------------------------------------
- get_motor_limits:
  - op  : 10
  - arg : [motor_id: Int16]
  - ret : [min_limit: Double, max_limit: Double]
  - desc: Get motor position limits
  - eeprom : [motor_id: 4]

- set_motor_limits:
  - op  : 11
  - arg : [motor_id: Int16, min_limit: Double, max_limit: Double]
  - ret : null
  - desc: Set motor position limits (e.g. min -4000 max 4000)  
  - getter_op : 10

- get_motor_currents:
  - op  : 12
  - arg : [motor_id: Int16]
  - ret : [boost: Double, travel: Double, hold: Double]
  - desc: Get motor current (Ampere) setting. Boost is acceleration current, travel is moving current, hold is holding current
  - eeprom : [motor_id: 4]

- set_motor_currents:
  - op  : 13
  - arg : [motor_id: Int16, boost: Double, travel: Double, hold: Double]
  - ret : null
  - desc: Set motor current (Ampere). Boost is acceleration current, travel is moving current, hold is holding current
  - getter_op: 12

- get_motor_config:
  - op  : 14
  - arg : [motor_id: Int16]
  - ret : [invert_dir: Boolean, kp: Double, ki: Double, kd: Double, num_usteps: Int16]
  - desc: Get motor config. Invert_dir is motor direction inversion flag. Kp, Ki, Kd is PID gain. Currently, Kd and num_usteps cannot be changed.
  - eeprom : [motor_id: 4]

- set_motor_config:
  - op  : 15
  - arg : [motor_id: Int16, invert_dir: Boolean, kp: Double, ki: Double, kd: Double, num_usteps: Int16]
  - ret : null
  - desc: Set motor config. Invert_dir is motor direction inversion flag. Kp, Ki, Kd is PID gain. num_usteps is number of substep for each step.
  - getter_op: 14

- read_motor_inputs:
  - op  : 16
  - arg : [motor_id: Int16]
  - ret : [motor_inputs: Int16]
  - desc: Read various motor inputs, collected as bitmasks (1 is Active). Check MotorInputBitmask for the bitmask details.

- clear_motor_fault:
  - op  : 17
  - arg : [motor_id: Int16]
  - ret : null
  - desc: Clear motor faults. You should send this before moving motor, every time motor failure occurs.

- get_motor_open_loop:
  - op  : 18
  - arg : [motor_id: Int16]
  - ret : [is_open_loop: Boolean]
  - desc: Returns false if motor is not in open loop control mode, true otherwise.

- set_motor_open_loop:
  - op  : 19
  - arg : [motor_id: Int16, is_open_loop: Boolean]
  - ret : null
  - desc: Set use_openloop to True, to activate open loop control mode. is_error will be True if motor mode cannot be set (e.g. while still moving).

- get_motor_status:
  - op  : 20
  - arg : [motor_id: Int16]
  - ret : [motor_status: UInt16]
  - desc: Get motor status. Check MotorStatusBitmask under ENUMS section.

- home_motor:
  - op  : 21
  - arg : [motor_id: Int16, flag: UInt16, pos_edge: Boolean, pos_dir: Boolean, slow_vel: Double, fast_vel: Double, accel: Double, jrk: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Home motor. Automatically set motor position to 0 upon finished. Delidder used home switch only for homing
          Arguments
          - flag     -> Always set this to 0 for now. 
          - pos_edge -> False to detect falling edge homing sensor signal, True to detect rising edge
          - pos_dir  -> Movement direction, set False to reverse.
          - slow_vel -> Initial velocity before home switch is activated.
          - fast_vel -> Velocity after home switch is activated (finding precise home location).
          - accel    -> Motor motion acceleration.
          
          Returns
          - motor_error -> Check MotorErrorCode in ENUMS section


- move_motor_abs:
  - op  : 22
  - arg : [motor_id: Int16, pos: Double, vel: Double, acc: Double, jrk: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Move motor to an absolute position
          Arguments
          - pos -> Target position, should be within position limit
          - vel -> Motor Velocity
          - acc -> Motor Acceleration
          
          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- move_motor_vel:
  - op  : 23
  - arg : [motor_id: Int16, forward: Boolean, vel: Double, accel: Double, jrk: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Move motor with certain velocity, stopped when position limit is reached.
          Arguments
          - forward -> Set to False to inverse direction.
          - vel     -> Motor velocity
          - acc     -> Motor Acceleration

          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- stop_motor:
  - op  : 24
  - arg : [motor_id: Int16, accel: Double]
  - ret : [motor_error_code: UInt16]
  - desc: Stop motor, even if its moving, with inputed acceleration set in accel. Return MotorErrorCode enum.

- abort_motor:
  - op : 25
  - arg : [motor_id: Int16]
  - ret : [motor_error_code: UInt16]
  - desc: Stop motor with predetermined acceleration (56000). Return MotorErrorCode enum.

- get_motor_pos:
  - op  : 27
  - arg : [motor_id: Int16]
  - ret : [curr_pos: Double, curr_vel: Double, curr_acc: Double]
  - desc: Get current motor position.

- set_motor_pos:
  - op  : 28
  - arg : [motor_id: Int16, pos: Double]
  - ret : null
  - desc: Manually set current motor position.

- move_multi_motor_abs:
  - op  : 34
  - arg : [motor_count: UInt16, motor_id: Array_Int16, pos: Array_Double, vel: Array_Double, acc: Array_Double]
  - ret : [motor_data_count: UInt16, motor_error_code: Array_UInt16_c]
  - desc: |
          Move motor to an absolute position
          Arguments
          - pos -> Target position, should be within position limit
          - vel -> Motor Velocity
          - acc -> Motor Acceleration
          
          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

#---------------------------------------- MOTOR EXTENDED 1------------------------------------
- set_motor_estopdelay:
  - op  : 45
  - arg : [motor_id: Int16, delay: UInt32]
  - ret : null
  - desc: Get motor estop delay for disable the motor

- get_motor_estopdelay:
  - op  : 46
  - arg : [motor_id: Int16]
  - ret : [delay: UInt32]
  - desc: Get motor estop delay for disable the motor

- set_motor_enabled:
  - op  : 47
  - arg : [motor_id: Int16, enable: Boolean]
  - ret : null
  - desc: Set enable to True to enable motor, False to disable.

- get_motor_deceleration:
  - op  : 48
  - arg : [motor_id: Int16]
  - ret : [stop_decel: Double, abort_decel: Double, stop_abort_jerk: Double]
  - desc: Get enable stop and abort deceleration in step/sec^2, and jerk in step/sec^3

- set_motor_deceleration:
  - op  : 49
  - arg : [motor_id: Int16, stop_decel: Double, abort_decel: Double, stop_abort_jerk: Double]
  - ret : null
  - desc: Set enable stop and abort deceleration in step/sec^2, and jerk in step/sec^3


#---------------------------- INPUT MONITOR ------------------------------------
- input_monitor_get_debouch_time_ms:
  - op  : 50
  - arg : null
  - ret : [mask: UInt32]
  - desc: get the debouch time in ms

- input_monitor_set_debouch_time_ms:
  - op  : 51
  - arg : [mask: UInt32]
  - ret : null
  - desc: set the debouch time in ms

- input_monitor_get_input_mask:
  - op  : 52
  - arg : null
  - ret : [mask: UInt32]
  - desc: get the input mask please see InputMonitorMask

- input_monitor_set_input_mask:
  - op  : 53
  - arg : [mask: UInt32]
  - ret : null
  - desc: set the input mask please see InputMonitorMask

- input_monitor_read_input:
  - op  : 54
  - arg : null
  - ret : [mask: UInt32]
  - desc: read the IO port (all bits)

#---------------------------- AUX ANALOG IN ADC -----------------------------
- set_aux_analog_cutoff_freq:
  - op  : 56
  - arg : [id: UInt16 , freq: Double]  
  - ret : null
  - desc: set setting analog in lpf cutoff freq ADC
  - getter_op: 57

- get_aux_analog_cutoff_freq:
  - op  : 57
  - arg : [id: UInt16 ]
  - ret : [freq: Double]
  - desc: get setting analog in lpf cutoff freq ADC
  - eeprom : [id: 6]

- set_aux_analog_lpf_period:
  - op  : 58
  - arg : [id: UInt16, period: UInt32]
  - ret : null
  - desc: set Aux analog in update period from ADC
  - getter_op: 59

- get_aux_analog_lpf_period:
  - op  : 59
  - arg : [id: UInt16]
  - ret : [period: UInt32]
  - desc: get Aux analog in update period from ADC
  - eeprom : [id: 6]

- get_aux_analog_params:
  - op  : 60
  - arg : [id: UInt16]  
  - ret : [scale: Double, offset: Double]
  - desc: get setting scale and offset for reading the analog in from ADC
  - eeprom : [id: 6]

- set_aux_analog_params:
  - op  : 61
  - arg : [id: UInt16, scale: Double, offset: Double]
  - ret : null
  - desc: setting scale and offset for reading the analog in from ADC
  - getter_op: 60

- read_value_analog_in:
  - op  : 62
  - arg : [id: UInt16]
  - ret : [value: Double]
  - desc: read value aux input analog

- read_value_analog_in_filtered:
  - op  : 63
  - arg : [id: UInt16]
  - ret : [value: Double]
  - desc: read value aux input analog filtered value

- read_adc:
  - op  : 64
  - arg : [id: UInt16]
  - ret : [value: UInt16]
  - desc: read raw adc value

- read_adc_filtered:
  - op  : 65
  - arg : [id: UInt16]
  - ret : [value: UInt16]
  - desc: read raw adc filtered value

#deprecated in fw 0.2.0.2 up due to use LPF for analog sensor
#dont use any more
#- set_aux_in_windows_size:
#  - op  : 66
#  - arg : [id: UInt16, size: UInt16]
#  - ret : null
#  - desc: set aux in mov avg windows size
#
#- get_aux_in_windows_size:
#  - op  : 67
#  - arg : [id: UInt16]
#  - ret : [size: UInt16]
#  - desc: get aux in mov avg windows size
#
#- set_aux_in_sampling_period:
#  - op  : 68
#  - arg : [id: UInt16, period_us: UInt32]
#  - ret : null
#  - desc: set aux in avg sampling period
#
#- get_aux_in_sampling_period:
#  - op  : 69
#  - arg : [id: UInt16]
#  - ret : [period_us: UInt32]
#  - desc: get aux in avg sampling period

# ==================== Heater Related =====================================================
- set_heater_enable:
  - op  : 70
  - arg : [id: UInt16, enable: Boolean]
  - ret : [status: Boolean]
  - desc: Set Heater pwm output enable, return false if there are fault condition or the output type isn't pwm

- get_heater_enable:
  - op  : 71
  - arg : [id: UInt16]
  - ret : [return: Boolean]
  - desc: Get Heater pwm output enable

- set_heater_pwm_range:
  - op  : 72
  - arg : [id: UInt16, max: Double, min: Double]
  - ret : null
  - desc: Set heater for temperature control working range in percentage pwm min and max

- get_heater_pwm_range:
  - op  : 73
  - arg : [id: UInt16]
  - ret : [max: Double, min: Double]
  - desc: Get heater for temperature control working range in percentage pwm min and max

- set_heater_pwm_out:
  - op  : 74
  - arg : [id: UInt16, value: Double]
  - ret : [status: Boolean]
  - desc: Set Heater output for temperature control in percentage of PWM, this opcode only work if the temp auto control is set to 0, return false if there are fault condition or the output type isn't pwm

- get_heater_pwm_out:
  - op  : 75
  - arg : [id: UInt16]
  - ret : [value: Double]
  - desc: Get Heater output for temperature control in percentage of PWM

- set_heater_digital_out:
  - op  : 76
  - arg : [id: UInt16, is_on: Boolean]
  - ret : [status: Boolean]
  - desc: Set heater gpio output level

- get_heater_digital_out:
  - op  : 77
  - arg : [id: UInt16]
  - ret : [is_on: Boolean]
  - desc: Get Heater gpio output

- set_heater_pwm_enable:
  - op  : 78
  - arg : [id: UInt16, enable: Boolean]
  - ret : [status: Boolean]
  - desc: switch between IO or PWM, , return false if the controller still enabled

- get_heater_pwm_enable:
  - op  : 79
  - arg : [id: UInt16]
  - ret : [enable: Boolean]
  - desc: switch between IO or PWM

- get_heater_error:
  - op  : 118
  - arg : [id: UInt16]
  - ret : [status: Boolean, error_type: UInt16]
  - desc: get heater error status

- clear_heater_error:
  - op  : 119
  - arg : [id: UInt16]
  - ret : null
  - desc: clear heater error status, so we can use it again

# -------------------------- ENCODER ------------------------------------
- get_encoder_config:
  - op  : 80
  - arg : [motor_id: Int16]
  - ret : [inverted: Boolean, count_per_step: Double]
  - desc: Get encoder inversion status (True if inverted) and encoder count per step.

- set_encoder_config:
  - op  : 81
  - arg : [motor_id: Int16, inverted: Boolean, count_per_step: Double]
  - ret : null
  - desc: Set encoder inversion status (True if inverted) and encoder count per step.

- get_fol_error_config:
  - op  : 82
  - arg : [motor_id: Int16]
  - ret : [is_tracking_enabled: Boolean, max_fol_error: Double]
  - desc: |
          Get following error (encoder count != motor position) config
          Returns
          - is_tracking_enabled -> True if following error is enabled
          - max_fol_error     -> Encoder count and motor position difference threshold that trigger the error.

- set_fol_error_config:
  - op  : 83
  - arg : [motor_id: Int16, is_tracking_enabled: Boolean, max_fol_error: Double]
  - ret : null
  - desc: |
          Set following error (encoder count != motor position) config
          Returns
          - is_tracking_enabled -> set to True to enable following error
          - max_fol_error     -> Encoder count and motor position difference threshold that trigger the error.

- get_encoder_position:
  - op  : 84
  - arg : [motor_id: Int16]
  - ret : [position: Double]
  - desc: get encoder position/counts
  
- get_encoder_correction_enable:
  - op : 86
  - arg : [id: Int16]
  - ret : [error_code: Int16, enable: Boolean]
  - desc: |
          Get encoder correction enable
          - id -> motor id
          - enable -> enable the encoder correction
          - error_code -> success if 0

- set_encoder_correction_enable:
  - op : 87
  - arg : [id: Int16, enable: Boolean]
  - ret : [error_code: Int16]
  - desc: |
          Get encoder correction enable
          - id -> motor id
          - enable -> enable the encoder correction
          - error_code -> success if 0

- get_encoder_correction_config:
  - op : 88
  - arg : [id: Int16]
  - ret : [error_code: Int16, ECp: Double, max_step_rate: Double, dead_band: Double, sampling_rate: UInt32]
  - desc: |
          Get encoder correction config
          - id -> motor id
          - ECp -> error correction proportional value
          - max_step_rate -> maximum correction step / second
          - error_code -> success if 0

- set_encoder_correction_config:
  - op : 89
  - arg : [id: Int16, ECp: Double, max_step_rate: Double, dead_band: Double, sampling_rate: UInt32]
  - ret : [error_code: Int16]
  - desc: |
          Set encoder correction config
          - id -> motor id
          - ECp -> error correction proportional value
          - max_step_rate -> maximum correction step / second
          - error_code -> success if 0

# ------------------------------- MOTION ABORT ------------------------------------
- get_abort_config:
  - op  : 90
  - arg : [abort_id: Int16]
  - ret : [trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - desc: please see AbortInputBitmask and AbortId

- set_abort_config:
  - op : 91
  - arg: [abort_id: Int16, trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - ret: null
  - desc: please see AbortInputBitmask and AbortId

- clear_triggered_inputs:
  - op : 92
  - arg: [abort_id: Int16]
  - ret: null

- get_triggered_inputs:
  - op : 93
  - arg: [abort_id: Int16]
  - ret: [input_mask: UInt32]

- get_triggered_positions:
  - op : 94
  - arg: [abort_id: Int16, first_input: Int16, count: Int16]
  - ret: [data: Array_Double_c]

- get_triggered_value:
  - op : 95
  - arg: [abort_id: Int16, first_input: Int16, count: Int16]
  - ret: [data: Array_Double_c] 

- get_abort_threshold:
  - op : 96
  - arg: [abort_id: Int16]
  - ret: [threshold: Double]

- set_abort_threshold:
  - op : 97
  - arg: [abort_id: Int16, threshold: Double]
  - ret: null

- read_abort_inputs:
  - op : 98
  - arg: null
  - ret: [input_mask: UInt32]


# ------------------------------- SN RELATED ------------------------------------
#- set_board_sn:
#  - op  : 102
#  - arg : [boardsn : UInt32]
#  - ret : null
#  - desc: Save Board SN to EEPROM
#  - getter_op: 103
  
#- get_board_sn:
#  - op  : 103
#  - arg : null
#  - ret : [boardsn : UInt32]
#  - desc: Read Board SN from EEPROM
#  - eeprom: 1
  
- set_mech_sn:
  - op  : 104
  - arg : [mechsn : UInt32]
  - ret : null
  - desc: Save Mech SN to EEPROM
  - getter_op: 105
  
- get_mech_sn:
  - op  : 105
  - arg : null
  - ret : [mechsn : UInt32]
  - desc: Read Mech SN from EEPROM
  - eeprom: null
  
- set_imager_sn:
  - op  : 106
  - arg : [imgrsn : UInt32]
  - ret : null
  - desc: Save  SN to EEPROM
  - getter_op: 107
  
- get_imager_sn:
  - op  : 107
  - arg : null
  - ret : [imgrsn : UInt32]
  - desc: Read  SN from EEPROM  
  - eeprom: null
  
- get_all_sn:
  - op  : 108
  - arg : null
  - ret : [boardsn : UInt32, mechsn : UInt32, imgrsn: UInt32 , primingsn : UInt32, thermosn : UInt32, rollersn: UInt32]
  - desc: Read All SN from EEPROM  

  
# ------------------------------- AUX ANALOG IN ADC SENSOR MONITOR ------------------------------------
- get_sensor_monitor_enable_mask:
  - op : 110
  - arg: null
  - ret: [enable_mask: UInt16]
  - desc: get sensor monitor enable mask
#  - eeprom: 1


- set_sensor_monitor_enable_mask:
  - op : 111
  - arg: [enable_mask: UInt16]
  - ret: null
  - desc: set sensor monitor enable mask
#  - getter_op: 110

- get_sensor_monitor_debounce_ms:
  - op : 112
  - arg: null
  - ret: [debounce_ms: UInt16]
  - desc: get sensor monitor debounce time in milisecond
#  - eeprom: 1
            
- set_sensor_monitor_debounce_ms:
  - op : 113
  - arg: [debounce_ms: UInt16]
  - ret: null
  - desc: set sensor monitor debounce time in milisecond
#  - getter_op: 112
            
- get_sensor_monitor_threshold:
  - op : 114
  - arg: [id: UInt16]
  - ret: [upper_limit: Double, lower_limit: Double]
  - desc:  get sensor monitor upper and lower threshold for corresponding channel
  - eeprom: [id: 2]

- set_sensor_monitor_threshold:
  - op : 115
  - arg: [id: UInt16, upper_limit: Double, lower_limit: Double]
  - ret: [success : Boolean]
  - desc: set sensor monitor upper and lower threshold for corresponding channel
  - getter_op: 114
  
# ==================== Temperature Controller =====================================================
- set_temp_controller_target:
  - op  : 120
  - arg : [id: UInt16, value: Double]
  - ret : null
  - desc: Set temperature target in celcius

- get_temp_controller_target:
  - op  : 121
  - arg : [id: UInt16]
  - ret : [value: Double]
  - desc: Get temperature target in celcius

- set_temp_controller_enable:
  - op  : 122
  - arg : [id: UInt16, value: Boolean]
  - ret : [status: Boolean]
  - desc: Set temperature control enabled 0 = disabled, 1 = enabled

- get_temp_controller_enable:
  - op  : 123
  - arg : [id: UInt16]
  - ret : [enabled: Boolean]
  - desc: Get temperature control enabled 0 = disabled, 1 = enabled

- set_temp_controller_pid:
  - op  : 124
  - arg : [id: UInt16, p: Double, i: Double, d: Double, iLimH: Double, iLimL: Double]
  - ret : null
  - desc: Set temperature control pid gains
#  - getter_op: 125

- get_temp_controller_pid:
  - op  : 125
  - arg : [id: UInt16]
  - ret : [p: Double, i: Double, d: Double, iLimH: Double, iLimL: Double]
  - desc: Get temperature control pid gains
#  - eeprom: [id: 2]

- set_temp_controller_deadband:
  - op  : 126
  - arg : [id: UInt16, lower: Double, upper: Double]
  - ret : null
  - desc: Set temperature control pid deadband in Celcius relative from target
#  - getter_op: 127

- get_temp_controller_deadband:
  - op  : 127
  - arg : [id: UInt16]
  - ret : [lower: Double, upper: Double]
  - desc: Get temperature control pid deadband
#  - eeprom: [id: 2]

- read_temp_controller_feedback:
  - op : 128
  - arg: [id: UInt16]
  - ret: [value: Double]
  - desc: Get temperature sensor feedback with exact same period sampling with controller

- set_temp_controller_out:
  - op  : 129
  - arg : [id: UInt16, value: Double]
  - ret : null
  - desc: Get temperature controller pwm out in percentage

- get_temp_controller_out:
  - op  : 130
  - arg : [id: UInt16]
  - ret : [value: Double]
  - desc: Get temperature controller pwm out in percentage

- set_temp_controller_auto:
  - op  : 131
  - arg : [id: UInt16, auto: Boolean]
  - ret : null
  - desc: Set temperature control auto, if 0 = we can manually control the actuator, if 1 we cannot control manually actuator output

- get_temp_controller_auto:
  - op  : 132
  - arg : [id: UInt16]
  - ret : [auto: Boolean]
  - desc: Get temperature controller auto

- set_temp_controller_period:
  - op  : 133
  - arg : [id: UInt16, period: UInt32]
  - ret : null
  - desc: Set temperature controller period in micro seconds

- get_temp_controller_period:
  - op  : 134
  - arg : [id: UInt16]
  - ret : [period: UInt32]
  - desc: Get temperature controller period in micro seconds

- set_temp_bang2_threshold:
  - op  : 135
  - arg : [id: UInt16, upper: Double, lower: Double]
  - ret : null
  - desc: Set temperature controller bang2 threshold in celcius

- get_temp_bang2_threshold:
  - op  : 136
  - arg : [id: UInt16]
  - ret : [upper: Double, lower: Double]
  - desc: Get temperature controller bang2 threshold in celcius

- set_temp_controller_type:
  - op  : 137
  - arg : [id: UInt16, type: UInt16]
  - ret : [status: Boolean]
  - desc: 0 = bang2, 1 = pid
#  - getter_op: 138

- get_temp_controller_type:
  - op  : 138
  - arg : [id: UInt16]
  - ret : [type: UInt16]
  - desc: 0 = bang2, 1 = pid
#  - eeprom: [id: 2]

- set_temp_controller_thermistor_id:
  - op  : 139
  - arg : [id: UInt16, thermistor_id: UInt16]
  - ret : null
  - desc: if thermistor_id > 1 = average all thermistor

- get_temp_controller_thermistor_id:
  - op  : 149
  - arg : [id: UInt16]
  - ret : [thermistor_id: UInt16]
  - desc: if thermistor_id > 1 = average all thermistor

# -------------------------- Temperature sensor related ------------------------
- set_temp_offset:
  - op  : 140
  - arg : [id: UInt16, offset: Double]
  - ret : null
  - desc: Set temperature offset for correcting the reading of temperature in celcius
#  - getter_op: 141

- get_temp_offset:
  - op  : 141
  - arg : [id: UInt16]
  - ret : [offset: Double]
  - desc: Get temperature offset for correcting the reading of temperature in celcius
#  - eeprom: [id: 6]

- set_steinhart_temperature_coeficient:
  - op  : 142
  - arg : [id: UInt16, A: Double, B: Double, C: Double]
  - ret : null
  - desc: Set steinhart coeficient of temperature sensor id is same as controller id
#  - getter_op: 143

- get_steinhart_temperature_coeficient:
  - op  : 143
  - arg : [id: UInt16]
  - ret : [A: Double, B: Double, C: Double]
  - desc: Get steinhart coeficient of temperature sensor id is same as controller id
#  - eeprom: [id: 6]

- set_thermistor_coeficient:
  - op  : 144
  - arg : [id: UInt16, r_divider: Double, v_offset: Double, gain_amplifier: Double, voltage_divider: Double]
  - ret : null
  - desc: Set steinhart coeficient of temperature sensor id is same as controller id
#  - getter_op: 145

- get_thermistor_coeficient:
  - op  : 145
  - arg : [id: UInt16]
  - ret : [r_divider: Double, v_offset: Double, gain_amplifier: Double, voltage_divider: Double]
  - desc: Get steinhart coeficient of temperature sensor id is same as controller id
#  - eeprom: [id: 6]

- read_temperature_sensor:
  - op  : 146
  - arg : [id: Int16]
  - ret : [value: Double]
  - desc: Read temperature sensor value

# -------------------------- PPI related ---------------------------------------
- read_ppi_direction_bit:
  - op  : 150
  - arg : [id: UInt16]
  - ret : [direction: UInt16]
  - desc: |
            get the data direction of PPI IO

- write_ppi_direction_bit:
  - op  : 151
  - arg : [id: UInt16, direction: UInt16]
  - ret : null
  - desc: |
            set the data direction of PPI IO

- read_ppi_bit:
  - op  : 152
  - arg : [id: UInt16]
  - ret : [value: UInt16]
  - desc: get bit IO value

- write_ppi_bit:
  - op  : 153
  - arg : [id: UInt16, value: UInt16]
  - ret : null
  - desc: write bit PPI IO value

- write_ppi_words:
  - op  : 154
  - arg : [masks: UInt16]
  - ret : null
  - desc: Perform write operation on PPI outputs directly  

- read_ppi_words:
  - op  : 155
  - arg : null
  - ret : [masks: UInt16]
  - desc: Perform read operation on PPI outputs/Inputs directly 

- set_clear_bit_timed_ppi:
  - op  : 156
  - arg : [id: UInt16, tick_us: UInt32]
  - ret : null
  - desc: Perform read operation on PPI outputs/Inputs directly 

- clear_set_bit_timed_ppi:
  - op  : 157
  - arg : [id: UInt16, tick_us: UInt32]
  - ret : null
  - desc: Perform read operation on PPI outputs/Inputs directly 

# ------------------------- power management specific ----------------------------------

- read_power_management_status_mask:
  - op  : 160
  - arg : null
  - ret : [status: UInt16]
  - desc: read power management status mask  

- read_power_management_state:
  - op  : 161
  - arg : null
  - ret : [state: UInt16]
  - desc: read power management state

- set_auto_on_enable:
  - op  : 162
  - arg : [enable: Boolean]
  - ret : null
  - desc: |
            set auto on enabled by software aproach

- get_auto_on_enable:
  - op  : 163
  - arg : null
  - ret : [enable: Boolean]
  - desc: |
            get auto on status

- cancel_shutdown_process:
  - op  : 164
  - arg : null
  - ret : [success: Boolean]
  - desc: |
            cancel the ongoing shutdown process

- sync_power_management:
  - op  : 165
  - arg : null
  - ret : [success: Boolean]
  - desc: |
            set the power management to standby mode, only use after update using bootloader

- get_batt_check_voltage:
  - op  : 166
  - arg : null
  - ret : [value: Double]
  - desc: |
            get supercap batt check voltage

# ------------------------------- TRINAMIC SPECIFIC ------------------------------------
- get_stall_position:
  - op : 169
  - arg: [id: Int16]
  - ret: [stall_position : Double]
  - desc:  get last stall motor position
  
- write_trinamic_register:
  - op : 170
  - arg: [id: Int16, address: UInt16, value: UInt32]
  - ret: null
  
- read_trinamic_register:
  - op : 171
  - arg: [id: Int16, address: UInt16]
  - ret: [value: UInt32]
  
- set_stallguard_config:
  - op : 172
  - arg: [id: Int16, enable: Boolean, vel_threshold : Double, stall_offset : Int16]
  - ret: null
  - getter_op: 173
  
- get_stallguard_config:
  - op : 173
  - arg: [id: Int16]
  - ret: [enable: Boolean, vel_threshold : Double, stall_offset : Int16]
  - eeprom: [id: 5]
  
- read_stallguard_result:
  - op : 174
  - arg: [id: Int16]
  - ret: [result : Int16]
  
- set_stealthchop_config:
  - op : 175
  - arg: [id: Int16, enable: Boolean, use_spreadcycle: Boolean, vel_threshold: Double]
  - ret: null
  - getter_op: 176

- get_stealthchop_config:
  - op : 176
  - arg: [id: Int16]
  - ret: [enable: Boolean, use_spreadcycle: Boolean, vel_threshold: Double]
  - eeprom: [id: 5]
  
- set_stealthchop_params:
  - op : 177
  - arg: [id: Int16, pwm_ofs: UInt16, pwm_grad: UInt16]
  - ret: null
  - getter_op: 178

- get_stealthchop_params:
  - op : 178
  - arg: [id: Int16]
  - ret: [pwm_ofs: UInt16, pwm_grad: UInt16]
  - eeprom: [id: 5]

# LED Specific -----------------------------------------------

- set_led_on:
  - op  : 181
  - arg : [enable: Boolean]
  - ret : [status: Boolean]
  - desc: turn on the LED

- get_led_on:
  - op  : 182
  - arg : null
  - ret : [enable: Boolean]
  - desc: get led on state

- set_clear_led:
  - op  : 183
  - arg : [duration: UInt32]
  - ret : [status: Boolean]
  - desc: turn on and then off after some period of time

- clear_set_led:
  - op  : 184
  - arg : [duration: UInt32]
  - ret : [status: Boolean]
  - desc: turn off and then on after some period of time

- get_led_error:
  - op  : 185
  - arg : null
  - ret : [status: Boolean, error_type: UInt16]
  - desc: get led error status, error type -> 0 for short circuit, 1 for open load

- clear_led_error:
  - op  : 186
  - arg : null
  - ret : null
  - desc: clear led error status, so we can use it again

- set_led_pwm_mode:
  - op  : 187
  - arg : [enable: Boolean]
  - ret : null
  - desc: enable or disable led PWM mode

- set_led_pwm_value:
  - op  : 188
  - arg : [duty: Double]
  - ret : null
  - desc: set duty value for led pwm 

- get_led_pwm_status:
  - op  : 189
  - arg : null
  - ret : [mode: UInt16, state: Double]
  - desc: get led mode IO or PWM and pwm value or io state



# heater fan extended

- set_fan_out:
  - op  : 190
  - arg : [id: UInt16, is_on: Boolean]
  - ret : [status: Boolean]
  - desc: Set fan gpio output level

- get_fan_out:
  - op  : 191
  - arg : [id: UInt16]
  - ret : [is_on: Boolean]
  - desc: Get fan gpio output

- set_fan_range:
  - op  : 193
  - arg : [id: UInt16, max: Double, min: Double]
  - ret : null
  - desc: Set fan gpio pwm range

- get_fan_range:
  - op  : 194
  - arg : [id: UInt16]
  - ret : [max: Double, min: Double]
  - desc: Get fan gpio pwm range

- set_fan_value:
  - op  : 195
  - arg : [id: UInt16, val: Double]
  - ret : null
  - desc: Set fan gpio pwm value

- get_fan_value:
  - op  : 196
  - arg : [id: UInt16]
  - ret : [val: Double]
  - desc: Get fan gpio pwm value

# ------------------------------- LED Ext ------------------------------------
- set_led_mux:
  - op  : 197
  - arg : [id: UInt16, state: Boolean]
  - ret : [status: Boolean]
  - desc: Set led mux on enable return led status

- get_led_mux:
  - op  : 198
  - arg : [id: UInt16]
  - ret : [id: UInt16, state: Boolean]
  - desc: Get led mux on enable

#will be deprecated due to split opcode into set_led_diag_enable and set_led_diag_param
- set_led_xxx_param:
  - op  : 199
  - arg : [id: UInt16, UseAdcDiag: Boolean, errTresh: Double, openTresh: Double, shortTresh: Double, diagEna: Boolean]
  - ret : null
  - desc: Set led diagnostic mode

# ------------------------------- EXT SN RELATED ------------------------------------
- set_priming_sn:
  - op  : 200
  - arg : [boardsn : UInt32]
  - ret : null
  - desc: Save Board SN to EEPROM
  - getter_op: 201
  
- get_priming_sn:
  - op  : 201
  - arg : null
  - ret : [boardsn : UInt32]
  - desc: Read Board SN from EEPROM
  - eeprom: null
  
- set_thermocycling_sn:
  - op  : 202
  - arg : [boardsn : UInt32]
  - ret : null
  - desc: Save Mech SN to EEPROM
  - getter_op: 203
  
- get_thermocycling_sn:
  - op  : 203
  - arg : null
  - ret : [boardsn : UInt32]
  - desc: Read Mech SN from EEPROM
  - eeprom: null
  
- set_roller_sn:
  - op  : 204
  - arg : [boardsn : UInt32]
  - ret : null
  - desc: Save  SN to EEPROM
  - getter_op: 205
  
- get_roller_sn:
  - op  : 205
  - arg : null
  - ret : [boardsn : UInt32]
  - desc: Read  SN from EEPROM  
  - eeprom: null
  
################################### TEMP CONTROLLER DIAG EXT #################################################
- set_temp_controller_diag_period:
  - op  : 206
  - arg : [id: UInt16, period: UInt32]
  - ret : null
  - desc: Set temperature controller period in micro seconds
  - getter_op: 207

- get_temp_controller_diag_period:
  - op  : 207
  - arg : [id: UInt16]
  - ret : [period: UInt32]
  - desc: Get temperature controller period in micro seconds
  - eeprom: [id: 2]

################################### LED DUPLEX & DIAG EXT #################################################
- set_led_diag_param:
  - op  : 208
  - arg : [errTresh: Double, openTresh: Double, shortTresh: Double]
  - ret : null
  - desc: Set led adc diagnostic parameter
  - getter_op: 209

- get_led_diag_param:
  - op  : 209
  - arg : null
  - ret : [errTresh: Double, openTresh: Double, shortTresh: Double]
  - desc: Get led adc diagnostic parameter
  - eeprom: null

- set_led_diag_enable:
  - op  : 210
  - arg : [diagEnable: Boolean, AdcMode: Boolean]
  - ret : null
  - desc: Set led adc diagnostic mode and enable 
  - getter_op: 211

- get_led_diag_enable:
  - op  : 211
  - arg : null
  - ret : [diagEnable: Boolean, AdcMode: Boolean]
  - desc: Get led adc diagnostic mode and enable 
  - eeprom: null



################################### EVENTS #################################################
EVENTS:
- motor_move_started:
  - op  : 512
  - ret: [motor_id: Int16]
  - desc: Fired upon motor movement is started.

- motor_move_done:
  - op  : 513
  - ret: [motor_id: Int16, status: UInt16, position: Double]
  - desc: Fired upon motor movement is done, send the motor status and position. Check MotorStatusBitmask enum for motor status.

- motor_home_done:
  - op  : 514
  - ret: [motor_id: Int16, home_pos: Double, pos: Double]
  - desc: Fired upon motor homing is done, return abs_pos (absolute position), and pos (position after applying offset).

- motor_error_occured:
  - op  : 515
  - ret: [motor_id: Int16, motor_error_code: UInt16]
  - desc: Fired upon motor error is occured. Check MotorErrorCode enum for possible error code.

- on_input_changed:
  - op  : 801
  - ret: [input_id: UInt16, is_on: UInt16]
  - desc: Fired upon input monitor changed
  
- on_sensor_out_of_bound:
  - op  : 802
  - ret: [id: UInt16, limit_type: UInt16, value: Double]
  - desc: Fired upon sensor monitor out of counds

- on_sequencer_started:
  - op  : 805
  - ret: null
  - desc: Fired when sequencer feature started
  
- on_sequencer_aborted:
  - op  : 806
  - ret: [id: UInt32, uncompleted_count: UInt16]
  - desc: Fired when sequencer feature aborted
  
- on_sequencer_item_run:
  - op  : 807
  - ret: [id: UInt32]
  - desc: Fired when sequence item specified by id begin executes

- on_sequencer_item_finish:
  - op  : 808
  - ret: [id: UInt32]
  - desc: Fired when sequence item specified by id sucessfully executed

- on_sequencer_all_finish:
  - op  : 809
  - ret: null
  - desc: Fired when all sequences item sucessfully executed

- on_sequencer_fault:
  - op  : 810
  - ret: [id: UInt32, uncompleted_count: UInt16]
  - desc: Fired when sequencer fault (motor fault)

- on_power_management_status_changed:
  - op  : 821
  - ret: [status_mask: UInt16]
  - desc: Fired when there is a power management status chagend ie. power loss

- on_led_error:
  - op  : 831
  - ret: [error_type: UInt16]
  - desc: Fired when there is a n led error state, 0 for short circuit, 1 for open load

- on_heater_error:
  - op  : 841
  - ret: [id: UInt16, error_type: UInt16]
  - desc: Fired when there is an error on any of the heater, 0 for short circuit, 1 for open load