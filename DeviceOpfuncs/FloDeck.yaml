APPNAME: FLO_DECK
VERSION: v0.1.0

################################### ENUMS & BITMASKS #################################################-
ENUMS:
- MotorErrorCode:
  - desc : Motor error code
  - type : UInt16
  - value:
    - mecodeNone : [0, No Error]
    - mecodeInvalidID : [1, Invalid Motor ID]
    - mecodeLowerLimit : [2, Motor hit Lower Limit switch]
    - mecodeUpperLimit : [3, Motor hit Upper Limit switch]
    - mecodeIllegalPos : [4, Illegal Position]
    - mecodeIllegalVel : [5, Illegal Velocity]
    - mecodeIllegalAcc : [6, Illegal Acceleration]
    - mecodeAborted : [7, Motor Stopped by Motion Abort]
    - mecodeFolErrorIdle : [8, Encoder doesn't match Motor position while Idle]
    - mecodeFolErrorMoving : [9, Encoder doesn't match Motor position while Moving]
    - mecodeEncoderError : [10, Encoder error]
    - mecodeDisabled : [11, Motor is disabled]
    - mecodeHoming : [12, Motor is homing]
    - mecodeEmergencyStop : [13, Emergency Stop is activated]
    - mecodeHardBrake : [14, Hard Brake is activated]
    - mecodeDriverFault : [15, Motor driver fault signal is triggered]

- MotorStatusBitmask:
  - desc : Bitmask for motor status code (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - msbitMoving : [1, Motor is moving]
    - msbitHoming : [2, Motor is homing]
    - msbitHomed : [4, Motor is already homed]
    - msbitLowerLimit : [8, LowerLimit switch is hit]
    - msbitUpperLimit : [16, UpperLimit switch is hit]
    - msbitOverCurrent : [32, Motor overcurrent]
    - msbitAborted : [64, Motor motion abort is triggered]
    - msbitFolErrorIdle : [128, Following Error while motor is idle]
    - msbitFolErrorMoving : [256, Following Error while motor is moving]
    - msbitEncoderError : [512, Encode Error]
    - msbitDisabled : [1024, Motor is Disabled]
    - msbitEmergencyStop : [2048, Emergency Stop is triggered]
    - msbitHardBrake : [4096, HardBrake is triggered]
    - msbitDriverFault : [8192, Motor driver fault signal is triggered]

- MotorInputBitmask:
  - desc : Bitmask for motor input code (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - mibitHomeSwitch : [1, motor homing switch]
    - mibitLowerLimit : [2, motor lower limit switch]
    - mibitUpperLimit : [4, motor upper limit switch]
    - mibitEnableSwitch : [8, motor enable switch]
    - mibitAbortFlag : [16, motor abort flag]
    - mibitDriverFault : [32, motor driver fault signal]

- LoggerTickBitmask:
  - desc : Bitmask for activation of logger tick (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - logbitIndexActive : [1, Activate logging index]

- LoggerMotorBitmask:
  - desc : Bitmask for activation of motor data logging (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - logbitAdcMotorCurrentA : [1, Raw ADC value of Motor Coil A Current sensor reading (Current = ADCvalue * CurrsensorScale + CurrsensorOffset)]
    - logbitAdcMotorCurrentB : [2, Raw ADC value of Motor Coil B Current sensor reading (Current = ADCvalue * CurrsensorScale + CurrsensorOffset)]
    - logbitMotorCurrentError : [4, PID Current Error (Ampere * 1e4 + 32768)]
    - logbitMotorCurrentSetpoint : [8, PID Current Setpoint (Ampere * 1e4 + 32768)]
    - logbitMotorControlOut : [16, Motor PID total Control output]
    - logbitMotorPwmA : [32, PWM of Motor Coil A]
    - logbitMotorPwmB : [64, PWM of Motor Coil B]
    - logbitMotorVelocity : [128, Velocity of Motor (Velocity * 10  + 32768)]

# - AbortInputBitmask:
  # - desc : Bitmask for activating input of motion abort
  # - type : UInt32
  # - Value:
    # - Motor0Fault : [1, motor 0 fault active high]
    # - Motor1Fault : [2, motor 1 fault active high]
    # - Estop : [4, Estop Signal active low]
    # - TouchOff : [8, Touch off Signal active low]
    # - DoorOpen : [16, Door Open signal active low]
    # - TrashBin : [32, Trash Bin signal active low]
    # - DoorClosed : [64, Door Open signal active low]

# - AbortId:
  # - desc : Id for abort object
  # - type : Int16
  # - Value:
    # - Motor0 : [0, motor 0 it will stop motor with deceleration if aborted]
    # - Motor1 : [1, motor 1 it will stop motor with deceleration if aborted]
    # - Estop : [2, Estop it will give low signal to bus if aborted]
    # - TouchOff : [3, Touch off it will give low signal to bus if aborted]

# - InputMonitorMask:
  # - desc : Bitmask for activating input monitor also value for read input
  # - type : UInt32
  # - Value:
    # - Estop : [1, Estop Signal active low]
    # - TouchOff : [2, Touch off Signal active low]
    # - DoorOpen : [4, Door Open signal active low]
    # - TrashBin : [8, Trash Bin signal active low]
    # - DoorClosed : [16, Door Open signal active low]
    # - Home motor 0 : [32, Home motor 0]
    # - Home motor 1 : [64, Home motor 1]
################################### COMMANDS #################################################
COMMANDS:
- save_configuration:
  - op  : 3
  - arg : null
  - ret : null
  - desc: Save configuration to EEPROM

- set_address:
  - op  : 100
  - arg : [addr : Int16]
  - ret : null
  - desc: Set device address

#---------------------------------------- MOTOR ------------------------------------
- get_motor_limits:
  - op  : 10
  - arg : [motor_id: Int16]
  - ret : [min_limit: Double, max_limit: Double]
  - eeprom : [motor_id: 2] 
  - desc: Get motor position limits

- set_motor_limits:
  - op  : 11
  - arg : [motor_id: Int16, min_limit: Double, max_limit: Double]
  - ret : null
  - getter_op : 10
  - desc: Set motor position limits (e.g. min -4000 max 4000)  

- get_motor_currents:
  - op  : 12
  - arg : [motor_id: Int16]
  - ret : [boost: Double, travel: Double, hold: Double]
  - eeprom : [motor_id: 2] 
  - desc: Get motor current (Ampere) setting. Boost is acceleration current, travel is moving current, hold is holding current

- set_motor_currents:
  - op  : 13
  - arg : [motor_id: Int16, boost: Double, travel: Double, hold: Double]
  - ret : null
  - getter_op : 13
  - desc: Set motor current (Ampere). Boost is acceleration current, travel is moving current, hold is holding current

- get_motor_config:
  - op  : 14
  - arg : [motor_id: Int16]
  - ret : [invert_dir: Boolean, kp: Double, ki: Double, kd: Double, num_usteps: Int16]
  - eeprom : [motor_id: 2] 
  - desc: Get motor config. Invert_dir is motor direction inversion flag. Kp, Ki, Kd is PID gain. Currently, Kd and num_usteps cannot be changed.

- set_motor_config:
  - op  : 15
  - arg : [motor_id: Int16, invert_dir: Boolean, kp: Double, ki: Double, kd: Double, num_usteps: Int16]
  - ret : null
  - getter_op : 14
  - desc: Set motor config. Invert_dir is motor direction inversion flag. Kp, Ki, Kd is PID gain. num_usteps is number of substep for each step.

- read_motor_inputs:
  - op  : 16
  - arg : [motor_id: Int16]
  - ret : [motor_inputs: Int16]
  - desc: Read various motor inputs, collected as bitmasks (1 is Active). Check MotorInputBitmask for the bitmask details.

- clear_motor_fault:
  - op  : 17
  - arg : [motor_id: Int16]
  - ret : null
  - desc: Clear motor faults. You should send this before moving motor, every time motor failure occurs.

- get_motor_open_loop:
  - op  : 18
  - arg : [motor_id: Int16]
  - ret : [is_open_loop: Boolean]
  - desc: Returns false if motor is not in open loop control mode, true otherwise.

- set_motor_open_loop:
  - op  : 19
  - arg : [motor_id: Int16, is_open_loop: Boolean]
  - ret : null
  - desc: Set use_openloop to True, to activate open loop control mode. is_error will be True if motor mode cannot be set (e.g. while still moving).

- get_motor_status:
  - op  : 20
  - arg : [motor_id: Int16]
  - ret : [motor_status: UInt16]
  - desc: Get motor status. Check MotorStatusBitmask under ENUMS section.

- home_motor:
  - op  : 21
  - arg : [motor_id: Int16, flag: UInt16, pos_edge: Boolean, pos_dir: Boolean, slow_vel: Double, fast_vel: Double, accel: Double, jerk: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Home motor. Automatically set motor position to 0 upon finished. Delidder used home switch only for homing
          Arguments
          - flag     -> Always set this to 0 for now. 
          - pos_edge -> False to detect falling edge homing sensor signal, True to detect rising edge
          - pos_dir  -> Movement direction, set False to reverse.
          - slow_vel -> Initial velocity before home switch is activated.
          - fast_vel -> Velocity after home switch is activated (finding precise home location).
          - accel    -> Motor motion acceleration.
          - jerk     -> Motor jerk.
          
          Returns
          - motor_error -> Check MotorErrorCode in ENUMS section


- move_motor_abs:
  - op  : 22
  - arg : [motor_id: Int16, pos: Double, vel: Double, acc: Double, jrk: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Move motor to an absolute position
          Arguments
          - pos -> Target position, should be within position limit
          - vel -> Motor Velocity
          - acc -> Motor Acceleration
          - jrk -> Motor Jerk (optional, depends on profile type)
          
          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- move_motor_vel:
  - op  : 23
  - arg : [motor_id: Int16, forward: Boolean, vel: Double, accel: Double, jrk: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Move motor with certain velocity, stopped when position limit is reached.
          Arguments
          - forward -> Set to False to inverse direction.
          - vel     -> Motor velocity
          - acc     -> Motor Acceleration
          - jrk     -> Motor Jerk (optional, depends on profile type)

          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- stop_motor:
  - op  : 24
  - arg : [motor_id: Int16, accel: Double, jrk: Double]
  - ret : [motor_error_code: UInt16]
  - desc: Stop motor, even if its moving, with inputed acceleration set in accel. Return MotorErrorCode enum.

- abort_motor:
  - op : 25
  - arg : [motor_id: Int16]
  - ret : [motor_error_code: UInt16]
  - desc: Stop motor with predetermined acceleration (56000). Return MotorErrorCode enum.

- get_motor_pos:
  - op  : 27
  - arg : [motor_id: Int16]
  - ret : [curr_pos: Double, curr_vel: Double, curr_acc: Double]
  - desc: Get current motor position.

- set_motor_pos:
  - op  : 28
  - arg : [motor_id: Int16, pos: Double]
  - ret : null
  - desc: Manually set current motor position.

- set_motor_duty_cycle:
  - op  : 29
  - arg : [motor_id: Int16, pct_a: Double, pct_b: Double]
  - ret : null
  - desc: Set the duty cycle of motor coil A and B (in percent/ 0-100). Only works on open loop mode. 

- set_motor_estopdelay:
  - op  : 45
  - arg : [motor_id: Int16, delay: UInt32]
  - ret : null
  - desc: Get motor estop delay for disable the motor

- get_motor_estopdelay:
  - op  : 46
  - arg : [motor_id: Int16]
  - ret : [delay: UInt32]
  - desc: Get motor estop delay for disable the motor

- set_motor_enabled:
  - op  : 47
  - arg : [motor_id: Int16, enable: Boolean]
  - ret : null
  - desc: Set enable to True to enable motor, False to disable.

- get_motor_deceleration:
  - op  : 48
  - arg : [motor_id: Int16]
  - ret : [stop_decel: Double, abort_decel: Double, stop_abort_jerk: Double]
  - desc: Get enable stop and abort deceleration in step/sec^2, and jerk in step/sec^3

- set_motor_deceleration:
  - op  : 49
  - arg : [motor_id: Int16, stop_decel: Double, abort_decel: Double, stop_abort_jerk: Double]
  - ret : null
  - desc: Set enable stop and abort deceleration in step/sec^2, and jerk in step/sec^3
  
- get_profile_list:
  - op  : 110
  - arg : [motor_id: Int16]
  - ret : [count: Int16, data: Array_Int16_c]
  - desc: Obtain list of available motion profile types

- get_active_profile:
  - op  : 111
  - arg : [motor_id: Int16]
  - ret : [profile_type: Int16]
  - desc: Get the currently active profile
  
- set_active_profile:
  - op  : 112
  - arg : [motor_id: Int16, profile_type: Int16]
  - ret : [ret_code: Int16]
  - desc: Set active profile, returns 0 if success

  
#---------------------------- INPUT MONITOR ------------------------------------
- get_debouch_time_ms:
  - op  : 52
  - arg : null
  - ret : [mask: UInt32]
  - eeprom : null
  - desc: get the debouch time in ms

- set_debouch_time_ms:
  - op  : 53
  - arg : [mask: UInt32]
  - ret : null
  - getter_op : 52
  - desc: set the debouch time in ms

- get_input_mask:
  - op  : 54
  - arg : null
  - ret : [mask: UInt32]
  - eeprom : null
  - desc: get the input mask please see InputMonitorMask

- set_input_mask:
  - op  : 55
  - arg : [mask: UInt32]
  - ret : null
  - getter_op : 54
  - desc: set the input mask please see InputMonitorMask

- read_inputs:
  - op  : 56
  - arg : null
  - ret : [mask: UInt32]
  - desc: get the value of input the value is describe on InputMonitorMask

#---------------------------- CURRENT SENSE ------------------------------------
- read_current_sense:
  - op  : 71
  - arg : [sensor_id : UInt16]
  - ret : [current : Double]
  - desc: Get motor coil current (Ampere). The sensor ID numbering follows this scheme -> {Motor 0 - Coil A, Motor 0 - Coil B, Motor 1 - Coil A, Motor 1 - Coil B}

- get_current_sense_config:
  - op  : 72
  - arg : [sensor_id : UInt16]
  - ret : [scale : Double, offset : Double]
  - eeprom : [sensor_id : 4]
  - desc: Get motor coil current sensor scale and offset. The sensor ID numbering follows this scheme -> {Motor 0 - Coil A, Motor 0 - Coil B, Motor 1 - Coil A, Motor 1 - Coil B}

- set_current_sense_config:
  - op  : 73
  - arg : [sensor_id : UInt16, scale : Double, offset : Double]
  - ret : null
  - getter_op : 72
  - desc: Set motor coil current sensor scale and offset. The sensor ID numbering follows this scheme -> {Motor 0 - Coil A, Motor 0 - Coil B, Motor 1 - Coil A, Motor 1 - Coil B}

# -------------------------- ENCODER ------------------------------------
- get_encoder_config:
  - op  : 80
  - arg : [motor_id: Int16]
  - ret : [inverted: Boolean, count_per_step: Double]
  - eeprom : [motor_id: 2] 
  - desc: Get encoder inversion status (True if inverted) and encoder count per step.

- set_encoder_config:
  - op  : 81
  - arg : [motor_id: Int16, inverted: Boolean, count_per_step: Double]
  - ret : null
  - getter_op : 80
  - desc: Set encoder inversion status (True if inverted) and encoder count per step.

- get_fol_error_config:
  - op  : 82
  - arg : [motor_id: Int16]
  - ret : [is_tracking_enabled: Boolean, max_fol_error: Double]
  - eeprom : [motor_id: 2] 
  - desc: |
          Get following error (encoder count != motor position) config
          Returns
          - is_tracking_enabled -> True if following error is enabled
          - max_fol_error     -> Encoder count and motor position difference threshold that trigger the error.

- set_fol_error_config:
  - op  : 83
  - arg : [motor_id: Int16, is_tracking_enabled: Boolean, max_fol_error: Double]
  - ret : null
  - getter_op : 82
  - desc: |
          Set following error (encoder count != motor position) config
          Returns
          - is_tracking_enabled -> set to True to enable following error
          - max_fol_error     -> Encoder count and motor position difference threshold that trigger the error.

- get_encoder_position:
  - op  : 84
  - arg : [motor_id: Int16]
  - ret : [position: Double]
  - desc: get encoder position/counts

# ------------------------------- MOTION ABORT ------------------------------------
# *Note : currently only one motion abort driver, door interlock, is used
- get_abort_config:
  - op  : 90
  - arg : [abort_id: Int16]
  - ret : [trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - desc: please see AbortInputBitmask and AbortId

- set_abort_config:
  - op : 91
  - arg: [abort_id: Int16, trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - ret: null
  - desc: please see AbortInputBitmask and AbortId

- clear_triggered_inputs:
  - op : 92
  - arg: [abort_id: Int16]
  - ret: null

- get_triggered_inputs:
  - op : 93
  - arg: [abort_id: Int16]
  - ret: [input_mask: UInt32]

- get_triggered_positions:
  - op : 94
  - arg: [abort_id: Int16, first_input: Int16, count: Int16]
  - ret: [data: Array_Double_c]


#---------------------------------- LOGGING ---------------------------------------
- get_log_items:
  - op  : 35
  - arg : null
  - ret : [logtick_mask: UInt16, motor0_mask: UInt16, motor1_mask: UInt16, valve_mask: UInt16]
  - desc: |
           Get data logger activation status. Each logger module has bitmasks to represent/activate which data is logged.
           - logtick  -> provide logger tick that keeps incremented, one tick per log sampling, to provide information if any data is missing.
                         Activation bitmasks is described in LoggerTickBitmask under ENUMS section.
           - motor0   -> log motor 0-related data. Check LoggerMotorBitmask.
           - motor1   -> log motor 1-related data. Check LoggerMotorBitmask.
           - valve    -> valve-related data. Check LoggerValveBitmask.

- set_log_items:
  - op  : 36
  - arg : [logtick_mask: UInt16, motor0_mask: UInt16, motor1_mask: UInt16, valve_mask: UInt16]
  - ret : [success: Boolean]
  - desc: |
          Set data logger activation.  Check get_log_items opcode for furher explanation of bitmasks and modules.
          Success will be False if device fails to activate all given masks, which happen when number of logging channel is insufficient (MAX NUM of channel is 9).

- start_log:
  - op  : 37
  - arg : null
  - ret : [started: Boolean]
  - desc: Start data logger. started is False if unable to start (log items is not set yet).

- stop_log:
  - op  : 38
  - arg : null
  - ret : null
  - desc: Stop data logger.

- read_log_data:
  - op  : 39
  - arg : [start_index: Int16]
  - ret : [num_items: Int16, data: Array_UInt16_c]
  - desc: Read log data from a starting index, maximum data per command is 251 items.
          Arguments
          - start_index -> Starting index to be read

          Returns
          - num_items -> number of received data
          - data      -> array of received data

          Note
          - Pump and Valves data will be sent as bitmask in one UInt16 data, check PumpValveLogDatamask

- get_log_status:
  - op  : 40
  - arg : null
  - ret : [status: Int16, triggered_pos: UInt16]
  - desc: | 
          Get logger status. If trigger is activated, trigger_pos contain the index of data where trigger is activated. status is enums that consist of
          - 0 -> logger is running
          - 1 -> logger is stopped by user
          - 2 -> logger is stopped by trigger
          - 3 -> logger has not been started at all

- read_log_stream_data:
  - op  : 41
  - arg : null
  - ret : [num_items: Int16, data: Array_UInt16_c]
  - desc: | 
          Read streaming of data from last read index, max 200 data per command. For example, first read_log_stream_data command will obtain
          data 0-199, second command will obtain data 200-399, and so on.
          Arguments
          - num_items -> number of received data
          - data      -> array of received data

          Note
          - Pump and Valves data will be sent as bitmask in one UInt16 data, check PumpValveLogDatamask

- set_log_trigger:
  - op  : 42
  - arg : [module_id: UInt16, signal_mask: UInt16, level: UInt16, trigger_type: Int16]
  - ret : [success: Boolean]
  - desc: |
          Set a signal from a module to simulate osciloscope-like trigger. If trigger activated, the logger will automatically setup data such that
          trigger position is in the middle of logged data. You should read the data using read_log_data command on trigger mode.
          See https://community.keysight.com/community/keysight-blogs/oscilloscopes/blog/2016/09/01/understanding-oscilloscope-trigger-system-basics-why-you-should-care
          to understand trigger in detail.
          Arguments
          - module_id    -> id of logger module, 0 is log tick, 1 is motor module, 1 is delidder module
          - signal_mask  -> data/signal activation mask for each module, similar to masks in set_log_items. Please check enum section for mask list
          - level        -> level of selected data/signal that activate the triggers
          - trigger_type -> trigger type, 0 is disable trigger, 1 is rising signal trigger, 2 is falling signal trigger, 3 is both rising and falling signal trigger

- get_log_period:
  - op  : 43
  - arg : null
  - ret : [period_us : UInt32]
  - desc: Get current logging period in microsecs.

- set_log_period:
  - op  : 44
  - arg : [period_us : UInt32]
  - ret : null
  - desc: Set current logging period in microsecs.

################################### EVENTS #################################################
EVENTS:
- motor_move_started:
  - op  : 512
  - ret: [motor_id: Int16]
  - desc: Fired upon motor movement is started.

- motor_move_done:
  - op  : 513
  - ret: [motor_id: Int16, status: UInt16, position: Double]
  - desc: Fired upon motor movement is done, send the motor status and position. Check MotorStatusBitmask enum for motor status.

- motor_home_done:
  - op  : 514
  - ret: [motor_id: Int16, home_pos: Double, pos: Double]
  - desc: Fired upon motor homing is done, return abs_pos (absolute position), and pos (position after applying offset).

- motor_error_occured:
  - op  : 515
  - ret: [motor_id: Int16, motor_error_code: UInt16]
  - desc: Fired upon motor error is occured. Check MotorErrorCode enum for possible error code.
  
- on_input_changed:
  - op  : 801
  - ret: [input_id: UInt16, is_on: UInt16]
  - desc: Fired upon motor input monitor changed