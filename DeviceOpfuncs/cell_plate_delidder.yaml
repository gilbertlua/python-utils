APPNAME: CELL_PLATE_DELIDDER
VERSION: v0.2.0

################################### ENUMS & BITMASKS #################################################-
ENUMS:
- MotorErrorCode:
  - desc : Motor error code
  - type : UInt16
  - value:
    - mecodeNone : [0, No Error]
    - mecodeInvalidID : [1, Invalid Motor ID]
    - mecodeLowerLimit : [2, Motor hit Lower Limit switch]
    - mecodeUpperLimit : [3, Motor hit Upper Limit switch]
    - mecodeIllegalPos : [4, Illegal Position]
    - mecodeIllegalVel : [5, Illegal Velocity]
    - mecodeIllegalAcc : [6, Illegal Acceleration]
    - mecodeAborted : [7, Motor Stopped by Motion Abort]
    - mecodeFolErrorIdle : [8, Encoder doesn't match Motor position while Idle]
    - mecodeFolErrorMoving : [9, Encoder doesn't match Motor position while Moving]
    - mecodeEncoderError : [10, Encoder error]
    - mecodeDisabled : [11, Motor is disabled]
    - mecodeHoming : [12, Motor is homing]
    - mecodeEmergencyStop : [13, Emergency Stop is activated]
    - mecodeHardBrake : [14, Hard Brake is activated]
    - mecodeDriverFault : [15, Motor driver fault signal is triggered]

- MotorStatusBitmask:
  - desc : Bitmask for motor status code (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - msbitMoving : [1, Motor is moving]
    - msbitHoming : [2, Motor is homing]
    - msbitHomed : [4, Motor is already homed]
    - msbitLowerLimit : [8, LowerLimit switch is hit (UNUSED)]
    - msbitUpperLimit : [16, UpperLimit switch is hit (UNUSED)]
    - msbitOverCurrent : [32, Motor overcurrent]
    - msbitAborted : [64, Motor motion abort is triggered (UNUSED)]
    - msbitFolErrorIdle : [128, Following Error while motor is idle]
    - msbitFolErrorMoving : [256, Following Error while motor is moving]
    - msbitEncoderError : [512, Encode Error]
    - msbitDisabled : [1024, Motor is Disabled]
    - msbitEmergencyStop : [2048, Emergency Stop is triggered (UNUSED)]
    - msbitHardBrake : [4096, HardBrake is triggered (UNUSED)]
    - msbitDriverFault : [8192, Motor driver fault signal is triggered]

- GripperStatusCode:
  - desc : Status code for gripper.
  - type : UInt16
  - value:
    - gscodeIdle : [0, Gripper is idle/doesn't grip anything]
    - gscodeProcGrip : [1, Starting lid gripping process]
    - gscodeGripSuccess : [2, Grip succesful, maintaining lid gripping]
    - gscodeGripFailure : [3, Grip failure, vacuum pressure setpoint cannot be reached while start/maintaing gripping process]
    - gscodeGripVacuumLoss : [4, Vacuum loss while maintaining lid gripping. Gripper will auto reopen vacuum valve, then close it when setpoint reached.]
    - gscodeProcRelease : [5, Starting lid release process]

- LoggerTickBitmask:
  - desc : Bitmask for activation of logger tick (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - logbitIndexActive : [1, Activate logging index]

- LoggerMotorBitmask:
  - desc : Bitmask for activation of motor data logging (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - logbitAdcMotorCurrentA : [1, Raw ADC value of Motor Coil A Current sensor reading (Current = ADCvalue * CurrsensorScale + CurrsensorOffset)]
    - logbitAdcMotorCurrentB : [2, Raw ADC value of Motor Coil B Current sensor reading (Current = ADCvalue * CurrsensorScale + CurrsensorOffset)]
    - logbitMotorCurrentError : [4, PID Current Error (Ampere * 1e4 + 32768)]
    - logbitMotorCurrentSetpoint : [8, PID Current Setpoint (Ampere * 1e4 + 32768)]
    - logbitMotorControlOut : [16, Motor PID total Control output]
    - logbitMotorPwmA : [32, PWM of Motor Coil A]
    - logbitMotorPwmB : [64, PWM of Motor Coil B]
    - logbitMotorVelocity : [128, Velocity of Motor (Velocity * 10  + 32768)]

- LoggerDelidderBitmask:
  - desc : Bitmask for activation of delidder data logging (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - logbitTankPsensorAdc : [1, Vacuum Tank pressure sensor ADC]
    - logbitPipePsensor0Adc : [2, Vacuum Pipe 0 pressure sensor ADC]
    - logbitPipePsensor1Adc : [4, Vacuum Pipe 1 pressure sensor ADC]
    - logbitPipePsensor2Adc : [8, Vacuum Pipe 2 pressure sensor ADC]
    - logbitPipePsensor3Adc : [16, Vacuum Pipe 3 pressure sensor ADC]
    - logbitPipePsensor4Adc : [32, Vacuum Pipe 4 (backup) pressure sensor ADC]
    - logbitPumpAndValve : [64, Pump and Valves activation status, data will be sent as bitmask, check PumpValveLogDatamask]

- PumpValveLogDatamask:
  - desc : Bitmask for obtaining Pump and Valve log data (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - pvbitPump : [1, Vacuum Pump Activation status]
    - pvbitVacValve0 : [2, Vacuum Valve 0 Opening status]
    - pvbitVacValve1 : [4, Vacuum Valve 1 Opening status]
    - pvbitVacValve2 : [8, Vacuum Valve 2 Opening status]
    - pvbitVacValve3 : [16, Vacuum Valve 3 Opening status]
    - pvbitRlsValve0 : [32, Release Valve 0 Opening status]
    - pvbitRlsValve1 : [64, Release Valve 1 Opening status]
    - pvbitRlsValve2 : [128, Release Valve 2 Opening status]
    - pvbitRlsValve3 : [256, Release Valve 3 Opening status]

################################### COMMANDS #################################################
COMMANDS:
- save_configuration:
  - op  : 3
  - arg : null
  - ret : null
  - desc: Save configuration to EEPROM

- set_address:
  - op  : 100
  - arg : [addr : Int16]
  - ret : null
  - desc: Set device address

#---------------------------------------- MOTOR ------------------------------------
- get_motor_limits:
  - op  : 10
  - arg : [motor_id: Int16]
  - ret : [min_limit: Double, max_limit: Double]
  - eeprom : null
  - desc: Get motor position limits

- set_motor_limits:
  - op  : 11
  - arg : [motor_id: Int16, min_limit: Double, max_limit: Double]
  - ret : null
  - getter_op : 10
  - desc: Set motor position limits (e.g. min -4000 max 4000)  

- get_motor_currents:
  - op  : 12
  - arg : [motor_id: Int16]
  - ret : [boost: Double, travel: Double, hold: Double]
  - eeprom : null
  - desc: Get motor current (Ampere) setting. Boost is acceleration current, travel is moving current, hold is holding current

- set_motor_currents:
  - op  : 13
  - arg : [motor_id: Int16, boost: Double, travel: Double, hold: Double]
  - ret : null
  - getter_op : 12
  - desc: Set motor current (Ampere). Boost is acceleration current, travel is moving current, hold is holding current

- get_motor_config:
  - op  : 14
  - arg : [motor_id: Int16]
  - ret : [invert_dir: Boolean, kp: Double, ki: Double, kd: Double, num_usteps: Int16]
  - eeprom : null
  - desc: Get motor config. Invert_dir is motor direction inversion flag. Kp, Ki, Kd is PID gain. Currently, Kd and num_usteps cannot be changed.

- set_motor_config:
  - op  : 15
  - arg : [motor_id: Int16, invert_dir: Boolean, kp: Double, ki: Double, kd: Double, num_usteps: Int16]
  - ret : null
  - getter_op : 14
  - desc: Set motor config. Invert_dir is motor direction inversion flag. Kp, Ki, Kd is PID gain. num_usteps is number of substep for each step.

- read_motor_inputs:
  - op  : 16
  - arg : [motor_id: Int16]
  - ret : [motor_inputs: Int16]
  - desc: Read various motor inputs, collected as bitmasks (1 is Active). For now, only two possible value, 1 means homing sensor is active, 0 means homing sensor inactive.

- clear_motor_fault:
  - op  : 17
  - arg : [motor_id: Int16]
  - ret : null
  - desc: Clear motor faults. You should send this before moving motor, every time motor failure occurs.

- get_motor_open_loop:
  - op  : 18
  - arg : [motor_id: Int16]
  - ret : [is_open_loop: Boolean]
  - desc: Returns false if motor is not in open loop control mode, true otherwise.

- set_motor_open_loop:
  - op  : 19
  - arg : [motor_id: Int16, is_open_loop: Boolean]
  - ret : null
  - desc: Set use_openloop to True, to activate open loop control mode. is_error will be True if motor mode cannot be set (e.g. while still moving).

- get_motor_status:
  - op  : 20
  - arg : [motor_id: Int16]
  - ret : [motor_status: UInt16]
  - desc: Get motor status. Check MotorStatusBitmask under ENUMS section.

- home_motor:
  - op  : 21
  - arg : [motor_id: Int16, flag: UInt16, pos_edge: Boolean, pos_dir: Boolean, slow_vel: Double, fast_vel: Double, accel: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Home motor. Automatically set motor position to 0 upon finished. Delidder used home switch only for homing
          Arguments
          - flag     -> Always set this to 0 for now. 
          - pos_edge -> False to detect falling edge homing sensor signal, True to detect rising edge
          - pos_dir  -> Movement direction, set False to reverse.
          - slow_vel -> Initial velocity before home switch is activated.
          - fast_vel -> Velocity after home switch is activated (finding precise home location).
          - accel    -> Motor motion acceleration.
          
          Returns
          - motor_error -> Check MotorErrorCode in ENUMS section


- move_motor_abs:
  - op  : 22
  - arg : [motor_id: Int16, pos: Double, vel: Double, acc: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Move motor to an absolute position
          Arguments
          - pos -> Target position, should be within position limit
          - vel -> Motor Velocity
          - acc -> Motor Acceleration
          
          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- move_motor_vel:
  - op  : 23
  - arg : [motor_id: Int16, forward: Boolean, vel: Double, accel: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Move motor with certain velocity, stopped when position limit is reached.
          Arguments
          - forward -> Set to False to inverse direction.
          - vel     -> Motor velocity
          - acc     -> Motor Acceleration

          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- stop_motor:
  - op  : 24
  - arg : [motor_id: Int16, accel: Double]
  - ret : [motor_error_code: UInt16]
  - desc: Stop motor, even if its moving, with inputed acceleration set in accel. Return MotorErrorCode enum.

- abort_motor:
  - op : 25
  - arg : [motor_id: Int16]
  - ret : [motor_error_code: UInt16]
  - desc: Stop motor with predetermined acceleration (56000). Return MotorErrorCode enum.

- get_motor_pos:
  - op  : 27
  - arg : [motor_id: Int16]
  - ret : [curr_pos: Double, curr_vel: Double, curr_acc: Double]
  - desc: Get current motor position.

- set_motor_pos:
  - op  : 28
  - arg : [motor_id: Int16, pos: Double]
  - ret : null
  - desc: Manually set current motor position.

- set_motor_duty_cycle:
  - op  : 29
  - arg : [motor_id: Int16, pct_a: Double, pct_b: Double]
  - ret : null
  - desc: Set the duty cycle of motor coil A and B (in percent/ 0-100). Only works on open loop mode. 

- set_motor_enabled:
  - op  : 47
  - arg : [motor_id: Int16, enable: Boolean]
  - ret : null
  - desc: Set enable to True to enable motor, False to disable.

#---------------------------- CURRENT SENSE ------------------------------------
- read_current_sense:
  - op  : 71
  - arg : [id : UInt16]
  - ret : [current : Double]
  - desc: Get motor coil current (Ampere). Coil A id is 0, coil B id is 1. 

- get_current_sense_config:
  - op  : 72
  - arg : [id : UInt16]
  - ret : [scale : Double, offset : Double]
  - eeprom : [id : 2]  
  - desc: Get motor coil current sensor scale and offset. Coil A id is 0, coil B id is 1.

- set_current_sense_config:
  - op  : 73
  - arg : [id : UInt16, scale : Double, offset : Double]
  - ret : null
  - getter_op : 72
  - desc: Set motor coil current sensor scale and offset. Coil A id is 0, coil B id is 1.

# -------------------------- ENCODER ------------------------------------
- get_encoder_config:
  - op  : 80
  - arg : [motor_id: Int16]
  - ret : [inverted: Boolean, count_per_step: Double]
  - eeprom : null
  - desc: Get encoder inversion status (True if inverted) and encoder count per step.

- set_encoder_config:
  - op  : 81
  - arg : [motor_id: Int16, inverted: Boolean, count_per_step: Double]
  - ret : null
  - getter_op : 80
  - desc: Set encoder inversion status (True if inverted) and encoder count per step.

- get_fol_error_config:
  - op  : 82
  - arg : [motor_id: Int16]
  - ret : [is_tracking_enabled: Boolean, max_fol_error: Double]
  - eeprom : null
  - desc: |
          Get following error (encoder count != motor position) config
          Returns
          - is_tracking_enabled -> True if following error is enabled
          - max_fol_error     -> Encoder count and motor position difference threshold that trigger the error.

- set_fol_error_config:
  - op  : 83
  - arg : [motor_id: Int16, is_tracking_enabled: Boolean, max_fol_error: Double]
  - ret : null
  - getter_op : 82
  - desc: |
          Set following error (encoder count != motor position) config
          Returns
          - is_tracking_enabled -> set to True to enable following error
          - max_fol_error     -> Encoder count and motor position difference threshold that trigger the error.

- get_encoder_position:
  - op  : 84
  - arg : [motor_id: Int16]
  - ret : [position: Double]
  - desc: get encoder position/counts

#--------------------------------- PUMP CONTROL -----------------------------------
- get_tank_pressure:
  - op  : 50
  - arg : null
  - ret : [pressure : Double]
  - desc: Get vacuum tank pressure.

- set_tank_psensor_config:
  - op  : 51
  - arg : [scale : Double, offset : Double]
  - ret : null
  - getter_op : 52
  - desc: Set vacuum tank pressure sensor scale and offset.

- get_tank_psensor_config:
  - op  : 52
  - arg : null
  - ret : [scale : Double, offset : Double]
  - eeprom : null
  - desc: Get vacuum tank pressure sensor scale and offset.

- set_pump_control_config:
  - op  : 53
  - arg : [automode : Boolean, invert_control: Boolean, active_low_pump : Boolean]
  - ret : null
  - getter_op : 54
  - desc: |
          Set vacuum pump control config.
          Arguments
          - automode        -> Set False to disable auto control (Autocontrol by default).
          - invert_control  -> Set True to Inverse the control.
          - active_low_pump -> Set True if pump activated by sending digital LOW signal.

- get_pump_control_config:
  - op  : 54
  - arg : null
  - ret : [automode : Boolean, invert_control: Boolean, active_low_pump : Boolean]
  - eeprom : null
  - desc: Get vacuum pump control config. See set_pump_control_config command for returns explanation.

- set_pump_control_setpoint:
  - op  : 55
  - arg : [vacuum_setpoint : Double, lower_deadband : Double, upper_deadband: Double]
  - ret : null
  - getter_op : 56
  - desc: Set vacuum pump control pressure setpoint and deadbands.

- get_pump_control_setpoint:
  - op  : 56
  - arg : null
  - ret : [vacuum_setpoint : Double, lower_deadband : Double, upper_deadband: Double]
  - eeprom : null
  - desc: Get vacuum pump control pressure setpoint and deadbands.

- set_pump_activation:
  - op  : 57
  - arg : [activate : Boolean]
  - ret : [success : Boolean]
  - desc: Set activate to False to deactivate Pump manually. Pump must be set to manual mode first, otherwise setting will be failed and success return False.

- is_pump_activated:
  - op  : 58
  - arg : null
  - ret : [activation : Boolean]
  - desc: Activation is True if vacuum pump is activated, otherwise it is False.

#---------------------- VACUUM GRIPPER & VALVES --------------------------
- get_all_pipe_pressure:
  - op  : 63
  - arg : null
  - ret : [p0 : Double, p1 : Double]
  - desc: Get all pressure level of delidder pipes

- get_pipe_pressure:
  - op  : 60
  - arg : [id : UInt16]
  - ret : [id_exist : Boolean, pressure : Double]
  - desc: Get pressure level of delidder pipe. 

- set_pipe_psensor_config:
  - op  : 61
  - arg : [id : UInt16, scale : Double, offset : Double]
  - ret : [id_exist : Boolean]
  - getter_op : 62
  - desc: Set delidder pipe pressure sensor scale and offset. 

- get_pipe_psensor_config:
  - op  : 62
  - arg : [id : UInt16]
  - ret : [id_exist : Boolean, scale : Double, offset : Double]
  - eeprom : [id : 2]
  - desc: Get delidder pipe pressure sensor scale and offset. 

- gripper_grip:
  - op  : 65
  - arg : [id : UInt16, vac_valve_opentime_us : UInt32, vacuum_setpoint: Double, lower_deadband : Double, upper_deadband : Double]
  - ret : [id_exist : Boolean]
  - desc: Grip lid using valve gripping sequence (gripper).
          Arguments
          - id                    -> Gripper id. Available id is 0 to 1.
          - vac_valve_opentime_us -> Vacuum valve opening time in microsecs on gripping initialization.
          - vacuum_setpoint       -> Vacuum pressure that should be maintaned while gripping.
          - lower_deadband        -> Lower deadband of vacuum setpoint.
          - upper_deadband        -> Upper deadband of vacuum setpoint.

          Returns
          - id_exist -> Return False if selected ID doesn't exist.

- gripper_release:
  - op  : 66
  - arg : [id : UInt16, rls_valve_opentime_us : UInt32]
  - ret : [id_exist : Boolean]
  - desc: Release lid using valve gripping sequence (gripper).
          Arguments
          - id                    -> Gripper id. Available id is 0 to 1.
          - rls_valve_opentime_us -> Release valve opening time in microsecs on release initialization.

          Returns
          - id_exist -> Return False if selected ID doesn't exist.

- get_gripper_status:
  - op  : 67
  - arg : [id : UInt16]
  - ret : [id_exist : Boolean, status : UInt16]
  - desc: Get gripper status. Check GripperStatusCode under ENUMS section for possible status.

- set_valves_opening:
  - op  : 95
  - arg : [valveBitmask : UInt16]
  - ret : null
  - desc: Set all valves open or close. Bitmask is in LSB manner, bit0 is valve0, bit1 is valve1 and so on. Set bit to 0 to close, 1 to open.

- get_valves_opening:
  - op  : 96
  - arg : null
  - ret : [statusBitmask : UInt16]
  - desc: Get all valves opening status. Bitmask arrangement same as set_valves_opening, bit 0 is close, bit 1 is opened.

- open_valve:
  - op  : 90
  - arg : [id : UInt16]
  - ret : [id_exist : Boolean]
  - desc: Open valve. Id 0-1 is vacuum valve, id 2-3 is release valve.

- close_valve:
  - op  : 91
  - arg : [id : UInt16]
  - ret : [id_exist : Boolean]
  - desc: Release valve. Id 0-1 is vacuum valve, id 2-3 is release valve.

- is_valve_opened:
  - op  : 92
  - arg : [id : UInt16]
  - ret : [id_exist : Boolean, is_opened : Boolean]
  - desc: Check if valve is opened.

- get_pulser_params:
  - op  : 93
  - arg : null
  - ret : [pulser_voltage : Double, hold_voltage : Double, supply_voltage : Double, pulse_time_us : UInt32]
  - eeprom : null
  - desc: |
          Return
          - pulser_voltage     -> voltage on pulsing for period us
          - hold_voltage  -> voltage on holding for period us
          - supply_voltage -> power supply for pulser
          - pulse_time_us     -> Valve pulsing time in microsecs.

- set_pulser_params:
  - op  : 94
  - arg : [pulser_voltage : Double, hold_voltage : Double, supply_voltage : Double, pulse_time_us : UInt32]
  - ret : null
  - getter_op : 93 
  - desc: |
          Arguments
          - pulser_voltage     -> voltage on pulsing for period us
          - hold_voltage  -> voltage on holding for period us
          - supply_voltage -> power supply for pulser
          - pulse_time_us     -> Valve pulsing time in microsecs.

#---------------------------------- LOGGING ---------------------------------------
- get_log_items:
  - op  : 35
  - arg : null
  - ret : [logtick_mask: UInt16, motor_mask: UInt16, delidder_mask: UInt16]
  - desc: |
           Get data logger activation status. Each logger module has bitmasks to represent/activate which data is logged.
           - logtick  -> provide logger tick that keeps incremented, one tick per log sampling, to provide information if any data is missing.
                         Activation bitmasks is described in LoggerTickBitmask under ENUMS section.
           - motor    -> log motor-related data. Check LoggerMotorBitmask.
           - delidder -> log delidder-related data. Check LoggerDelidderBitmask.

- set_log_items:
  - op  : 36
  - arg : [logtick_mask: UInt16, motor_mask: UInt16, delidder_mask: UInt16]
  - ret : [success: Boolean]
  - desc: |
          Set data logger activation.  Check get_log_items opcode for furher explanation of bitmasks and modules.
          Success will be False if device fails to activate all given masks, which happen when number of logging channel is insufficient.

- start_log:
  - op  : 37
  - arg : null
  - ret : [started: Boolean]
  - desc: Start data logger. started is False if unable to start (log items is not set yet).

- stop_log:
  - op  : 38
  - arg : null
  - ret : null
  - desc: Stop data logger.

- read_log_data:
  - op  : 39
  - arg : [start_index: Int16]
  - ret : [num_items: Int16, data: Array_UInt16_c]
  - desc: Read log data from a starting index, maximum data per command is 251 items.
          Arguments
          - start_index -> Starting index to be read

          Returns
          - num_items -> number of received data
          - data      -> array of received data

          Note
          - Pump and Valves data will be sent as bitmask in one UInt16 data, check PumpValveLogDatamask

- get_log_status:
  - op  : 40
  - arg : null
  - ret : [status: Int16, triggered_pos: UInt16]
  - desc: | 
          Get logger status. If trigger is activated, trigger_pos contain the index of data where trigger is activated. status is enums that consist of
          - 0 -> logger is running
          - 1 -> logger is stopped by user
          - 2 -> logger is stopped by trigger
          - 3 -> logger has not been started at all

- read_log_stream_data:
  - op  : 41
  - arg : null
  - ret : [num_items: Int16, data: Array_UInt16_c]
  - desc: | 
          Read streaming of data from last read index, max 200 data per command. For example, first read_log_stream_data command will obtain
          data 0-199, second command will obtain data 200-399, and so on.
          Arguments
          - num_items -> number of received data
          - data      -> array of received data

          Note
          - Pump and Valves data will be sent as bitmask in one UInt16 data, check PumpValveLogDatamask

- set_log_trigger:
  - op  : 42
  - arg : [module_id: UInt16, signal_mask: UInt16, level: UInt16, trigger_type: Int16]
  - ret : [success: Boolean]
  - desc: |
          Set a signal from a module to simulate osciloscope-like trigger. If trigger activated, the logger will automatically setup data such that
          trigger position is in the middle of logged data. You should read the data using read_log_data command on trigger mode.
          See https://community.keysight.com/community/keysight-blogs/oscilloscopes/blog/2016/09/01/understanding-oscilloscope-trigger-system-basics-why-you-should-care
          to understand trigger in detail.
          Arguments
          - module_id    -> id of logger module, 0 is log tick, 1 is motor module, 1 is delidder module
          - signal_mask  -> data/signal activation mask for each module, similar to masks in set_log_items. Please check enum section for mask list
          - level        -> level of selected data/signal that activate the triggers
          - trigger_type -> trigger type, 0 is disable trigger, 1 is rising signal trigger, 2 is falling signal trigger, 3 is both rising and falling signal trigger

- get_log_period:
  - op  : 43
  - arg : null
  - ret : [period_us : UInt32]
  - desc: Get current logging period in microsecs.

- set_log_period:
  - op  : 44
  - arg : [period_us : UInt32]
  - ret : null
  - desc: Set current logging period in microsecs.

################################### EVENTS #################################################
EVENTS:
- motor_move_started:
  - op  : 512
  - ret: [motor_id: Int16]
  - desc: Fired upon motor movement is started.

- motor_move_done:
  - op  : 513
  - ret: [motor_id: Int16, status: UInt16, position: Double]
  - desc: Fired upon motor movement is done, send the motor status and position. Check MotorStatusBitmask enum for motor status.

- motor_home_done:
  - op  : 514
  - ret: [motor_id: Int16, home_pos: Double, pos: Double]
  - desc: Fired upon motor homing is done, return abs_pos (absolute position), and pos (position after applying offset).

- motor_error_occured:
  - op  : 515
  - ret: [motor_id: Int16, motor_error_code: UInt16]
  - desc: Fired upon motor error is occured. Check MotorErrorCode enum for possible error code.

- valve_opened:
  - op  : 521
  - ret : [id : UInt16]
  - desc: Fired upon valve is opened. Valve id 0-3 is vacuum valve, id 4-7 is release valve.

- valve_closed:
  - op  : 522
  - ret : [id : UInt16]
  - desc: Fired upon valve is closed. Valve id 0-3 is vacuum valve, id 4-7 is release valve.

- gripper_action_start:
  - op  : 523
  - ret : [id : UInt16, status : UInt16]
  - desc: Fired upon gripper action is started (both release and gripping). Check GripperStatusCode enum for possible status.

- gripper_action_done:
  - op  : 524
  - ret : [id : UInt16, status : UInt16]
  - desc: Fired upon lid release is finished or gripping is succesful. Check GripperStatusCode enum for possible status.

- gripper_grip_failure:
  - op  : 525
  - ret : [id : UInt16]
  - desc: Fired upon gripping is failure, either when start gripping or maintaining grip.

- gripper_grip_vacuum_loss:
  - op  : 526
  - ret : [id : UInt16]
  - desc: |
          Fired upon gripper control detects a vacuum loss. This event only sent once when vacuum loss is first detected.
          It won't be resent again unless vacuum setpoint is already reached first before another loss occurs.