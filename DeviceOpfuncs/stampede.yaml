APPNAME: STAMPEDE
VERSION: v0.1.18

################################### ENUMS & BITMASKS #################################################-
ENUMS:
- MotorErrorCode:
  - desc : Motor error code
  - type : UInt16
  - value:
    - mecodeNone : [0, No Error]
    - mecodeInvalidID : [1, Invalid Motor ID]
    - mecodeLowerLimit : [2, Motor hit Lower Limit switch]
    - mecodeUpperLimit : [3, Motor hit Upper Limit switch]
    - mecodeIllegalPos : [4, Illegal Position]
    - mecodeIllegalVel : [5, Illegal Velocity]
    - mecodeIllegalAcc : [6, Illegal Acceleration]
    - mecodeAborted : [7, Motor Stopped by Motion Abort]
    - mecodeFolErrorIdle : [8, Encoder doesn't match Motor position while Idle]
    - mecodeFolErrorMoving : [9, Encoder doesn't match Motor position while Moving]
    - mecodeEncoderError : [10, Encoder error]
    - mecodeDisabled : [11, Motor is disabled]
    - mecodeHoming : [12, Motor is homing]
    - mecodeEmergencyStop : [13, Emergency Stop is activated]
    - mecodeHardBrake : [14, Hard Brake is activated]
    - mecodeDriverFault : [15, Motor driver fault signal is triggered]
    - mecNoMove : [16, Motor move to the same position]
    - mecMoveNotSupported : [17, some movement can't b overidden ( s-curve)]
    - mecIllegalJrk : [18, illegal jerk (s-curve)]
    - mecStalled : [19, motor stalled detected using trinamic stallguard]

- MotorStatusBitmask:
  - desc : Bitmask for motor status code (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - msbitMoving : [1, Motor is moving]
    - msbitHoming : [2, Motor is homing]
    - msbitHomed : [4, Motor is already homed]
    - msbitLowerLimit : [8, LowerLimit switch is hit]
    - msbitUpperLimit : [16, UpperLimit switch is hit]
    - msbitOverCurrent : [32, Motor overcurrent]
    - msbitAborted : [64, Motor motion abort is triggered]
    - msbitFolErrorIdle : [128, Following Error while motor is idle]
    - msbitFolErrorMoving : [256, Following Error while motor is moving]
    - msbitEncoderError : [512, Encode Error]
    - msbitDisabled : [1024, Motor is Disabled]
    - msbitEmergencyStop : [2048, Emergency Stop is triggered]
    - msbitHardBrake : [4096, HardBrake is triggered]
    - msbitDriverFault : [8192, Motor driver fault signal is triggered]

- MotorInputBitmask:
  - desc : Bitmask for motor input code (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - mibitHomeSwitch : [1, motor homing switch]
    - mibitLowerLimit : [2, motor lower limit switch]
    - mibitUpperLimit : [4, motor upper limit switch]
    - mibitEnableSwitch : [8, motor enable switch]
    - mibitAbortFlag : [16, motor abort flag]
    - mibitDriverFault : [32, motor driver fault signal]

#  Abort ID
#  0 = motor with decel

# Abort Input ( DUAL PLEXING )
# 0 = Motor 0 Fault
# 1 = FAM
# 2 = ROX

#  Sensor ID ( DUAL PLEXING )
#  0 = FAM
#  1 = ROX

# SENSOR MONITOR ID ( DUAL PLEXING )
# 0 = FAM
# 1 = ROX

# Temperature sensor ID
# 0 = Low Side
# 1 = High Side

#select_thres enum
# 0 = direct value
# 1 = scaling from peak sensor
# 2 = scaling from average peak sensor

################################### COMMANDS #################################################
COMMANDS:
#---------------------------------------- MOTOR ------------------------------------
- get_motor_limits:
  - op  : 10
  - arg : [motor_id: Int16]
  - ret : [min_limit: Double, max_limit: Double]
  - eeprom : [motor_id: 1]
  - desc: Get motor position limits

- set_motor_limits:
  - op  : 11
  - arg : [motor_id: Int16, min_limit: Double, max_limit: Double]
  - ret : null
  - getter_op : 10
  - desc: Set motor position limits (e.g. min -4000 max 4000)  

- get_motor_currents:
  - op  : 12
  - arg : [motor_id: Int16]
  - ret : [boost: Double, travel: Double, hold: Double]
  - eeprom : [motor_id: 1]
  - desc: Get motor current (Ampere) setting. Boost is acceleration current, travel is moving current, hold is holding current

- set_motor_currents:
  - op  : 13
  - arg : [motor_id: Int16, boost: Double, travel: Double, hold: Double]
  - ret : null
  - getter_op : 12
  - desc: Set motor current (Ampere). Boost is acceleration current, travel is moving current, hold is holding current

- get_motor_config:
  - op  : 14
  - arg : [motor_id: Int16]
  - ret : [invert_dir: Boolean, kp: Double, ki: Double, kd: Double, num_usteps: Int16]
  - eeprom : [motor_id: 1]
  - desc: Get motor config. Invert_dir is motor direction inversion flag. Kp, Ki, Kd is PID gain. Currently, Kd and num_usteps cannot be changed.

- set_motor_config:
  - op  : 15
  - arg : [motor_id: Int16, invert_dir: Boolean, kp: Double, ki: Double, kd: Double, num_usteps: Int16]
  - ret : null
  - getter_op : 14
  - desc: Set motor config. Invert_dir is motor direction inversion flag. Kp, Ki, Kd is PID gain. num_usteps is number of substep for each step.

- read_motor_inputs:
  - op  : 16
  - arg : [motor_id: Int16]
  - ret : [motor_inputs: Int16]
  - desc: Read various motor inputs, collected as bitmasks (1 is Active). Check MotorInputBitmask for the bitmask details.

- clear_motor_fault:
  - op  : 17
  - arg : [motor_id: Int16]
  - ret : null
  - desc: Clear motor faults. You should send this before moving motor, every time motor failure occurs.

- get_motor_open_loop:
  - op  : 18
  - arg : [motor_id: Int16]
  - ret : [is_open_loop: Boolean]
  - desc: Returns false if motor is not in open loop control mode, true otherwise.

- set_motor_open_loop:
  - op  : 19
  - arg : [motor_id: Int16, is_open_loop: Boolean]
  - ret : null
  - desc: Set use_openloop to True, to activate open loop control mode. is_error will be True if motor mode cannot be set (e.g. while still moving).

- get_motor_status:
  - op  : 20
  - arg : [motor_id: Int16]
  - ret : [motor_status: UInt16]
  - desc: Get motor status. Check MotorStatusBitmask under ENUMS section.

- home_motor:
  - op  : 21
  - arg : [motor_id: Int16, flag: UInt16, pos_edge: Boolean, pos_dir: Boolean, slow_vel: Double, fast_vel: Double, accel: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Home motor. Automatically set motor position to 0 upon finished. Delidder used home switch only for homing
          Arguments
          - flag     -> Always set this to 0 for now. 
          - pos_edge -> False to detect falling edge homing sensor signal, True to detect rising edge
          - pos_dir  -> Movement direction, set False to reverse.
          - slow_vel -> Initial velocity before home switch is activated.
          - fast_vel -> Velocity after home switch is activated (finding precise home location).
          - accel    -> Motor motion acceleration.
          
          Returns
          - motor_error -> Check MotorErrorCode in ENUMS section


- move_motor_abs:
  - op  : 22
  - arg : [motor_id: Int16, pos: Double, vel: Double, acc: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Move motor to an absolute position
          Arguments
          - pos -> Target position, should be within position limit
          - vel -> Motor Velocity
          - acc -> Motor Acceleration
          
          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- move_motor_vel:
  - op  : 23
  - arg : [motor_id: Int16, forward: Boolean, vel: Double, accel: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Move motor with certain velocity, stopped when position limit is reached.
          Arguments
          - forward -> Set to False to inverse direction.
          - vel     -> Motor velocity
          - acc     -> Motor Acceleration

          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- stop_motor:
  - op  : 24
  - arg : [motor_id: Int16, accel: Double]
  - ret : [motor_error_code: UInt16]
  - desc: Stop motor, even if its moving, with inputed acceleration set in accel. Return MotorErrorCode enum.

- abort_motor:
  - op : 25
  - arg : [motor_id: Int16]
  - ret : [motor_error_code: UInt16]
  - desc: Stop motor with predetermined acceleration (56000). Return MotorErrorCode enum.

- get_motor_pos:
  - op  : 27
  - arg : [motor_id: Int16]
  - ret : [curr_pos: Double, curr_vel: Double, curr_acc: Double]
  - desc: Get current motor position.

- set_motor_pos:
  - op  : 28
  - arg : [motor_id: Int16, pos: Double]
  - ret : null
  - desc: Manually set current motor position.

- move_multi_motor_abs:
  - op  : 34
  - arg : [motor_count: UInt16, motor_id: Array_Int16, pos: Array_Double, vel: Array_Double, acc: Array_Double]
  - ret : [motor_data_count: UInt16, motor_error_code: Array_UInt16_c]
  - desc: |
          Move motor to an absolute position
          Arguments
          - pos -> Target position, should be within position limit
          - vel -> Motor Velocity
          - acc -> Motor Acceleration
          
          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- set_motor_enabled:
  - op  : 47
  - arg : [motor_id: Int16, enable: Boolean]
  - ret : null
  - desc: Set enable to True to enable motor, False to disable.

- get_motor_deceleration:
  - op  : 48
  - arg : [motor_id: Int16]
  - ret : [stop_decel: Double, abort_decel: Double]
  - eeprom : [motor_id: 1]
  - desc: Get enable stop and abort deceleration in step/sec^2

- set_motor_deceleration:
  - op  : 49
  - arg : [motor_id: Int16, stop_decel: Double, abort_decel: Double]
  - ret : null
  - getter_op : 48
  - desc: Set enable stop and abort deceleration in step/sec^2

# -------------------------- ADS1115 ------------------------------------
- get_ADS1115_ch_enabled:
  - op  : 60
  - arg : [ch: Int16]
  - ret : [enable: Boolean]
  - desc: Get ADS1115 channel enable (ch 0-3)

- set_ADS1115_ch_enabled:
  - op  : 61
  - arg : [ch: Int16, enable: Boolean]
  - ret : null
  - desc: Set ADS1115 channel enable (ch 0-3)

- read_ADS1115_ADC:
  - op  : 62
  - arg : [ch: Int16]
  - ret : [value: Int16]
  - desc: read ADS1115 directly

- set_ADS1115_gain:
  - op  : 63
  - arg : [gain: UInt16]
  - ret : null
  - getter_op : 64
  - desc: |
          set ADS1115 Gain
          0 = 2/3x
          1 = 1x
          2 = 2x
          3 = 4x
          4 = 8x
          5 = 16x

- get_ADS1115_gain:
  - op  : 64
  - arg : null
  - ret : [gain: UInt16]
  - eeprom : null
  - desc: |
          set ADS1115 Gain
          0 = 2/3x
          1 = 1x
          2 = 2x
          3 = 4x
          4 = 8x
          5 = 16x

- read_ADS1115_value:
  - op  : 65
  - arg : [ch: Int16]
  - ret : [value: Double]
  - desc: Read ADS1115 channel value (ch 0-3)

- set_led_enable:
  - op  : 66
  - arg : [enable: Boolean]
  - ret : null
  - desc: Set led enable

- get_led_enable:
  - op  : 67
  - arg : null
  - ret : [enable: Boolean]
  - desc: Get led enable

- set_multiplex_config:
  - op  : 68
  - arg : [mode: UInt16, samplingUs: UInt32]
  - ret : null
  - getter_op : 69
  - desc: set multiplex configuration

- get_multiplex_config:
  - op  : 69
  - arg : null
  - ret : [mode: UInt16, samplingUs: UInt32]
  - eeprom : null
  - desc: get multiplex configuration

#------------ FInd Device -----------------------------------------------
- find_my_device:
  - op  : 70
  - arg : [timeout_ms: UInt32]
  - ret : null
  - desc: Device led will blink on setting period

- get_unique_name:
  - op  : 71
  - arg : null
  - ret : [name: String]
  - desc: Get BT device unique name

- read_pin:
  - op  : 72
  - arg : [pin_num: UInt16]
  - ret : [is_high: Boolean]
  - desc: read the pin number, if true pin is high

# -------------------------- ENCODER ------------------------------------
- get_encoder_config:
  - op  : 80
  - arg : [motor_id: Int16]
  - ret : [inverted: Boolean, count_per_step: Double]
  - eeprom : [motor_id: 1]
  - desc: Get encoder inversion status (True if inverted) and encoder count per step.

- set_encoder_config:
  - op  : 81
  - arg : [motor_id: Int16, inverted: Boolean, count_per_step: Double]
  - ret : null
  - getter_op : 80
  - desc: Set encoder inversion status (True if inverted) and encoder count per step.

- get_fol_error_config:
  - op  : 82
  - arg : [motor_id: Int16]
  - ret : [is_tracking_enabled: Boolean, max_fol_error: Double]
  - eeprom : [motor_id: 1]
  - desc: |
          Get following error (encoder count != motor position) config
          Returns
          - is_tracking_enabled -> True if following error is enabled
          - max_fol_error     -> Encoder count and motor position difference threshold that trigger the error.

- set_fol_error_config:
  - op  : 83
  - arg : [motor_id: Int16, is_tracking_enabled: Boolean, max_fol_error: Double]
  - ret : null
  - getter_op : 82
  - desc: |
          Set following error (encoder count != motor position) config
          Returns
          - is_tracking_enabled -> set to True to enable following error
          - max_fol_error     -> Encoder count and motor position difference threshold that trigger the error.

- get_encoder_position:
  - op  : 84
  - arg : [motor_id: Int16]
  - ret : [position: Double]
  - desc: get encoder position/counts

# ------------------------------- MOTION ABORT ------------------------------------
- get_abort_config:
  - op  : 90
  - arg : [abort_id: Int16]
  - ret : [trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - desc: please see AbortInputBitmask and AbortId

- set_abort_config:
  - op : 91
  - arg: [abort_id: Int16, trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - ret: null
  - desc: please see AbortInputBitmask and AbortId

- clear_triggered_inputs:
  - op : 92
  - arg: [abort_id: Int16]
  - ret: null

- get_triggered_inputs:
  - op : 93
  - arg: [abort_id: Int16]
  - ret: [input_mask: UInt32]

- get_triggered_positions:
  - op : 94
  - arg: [abort_id: Int16, first_input: Int16, count: Int16]
  - ret: [data: Array_Double_c]

- get_triggered_value:
  - op : 95
  - arg: [abort_id: Int16, first_input: Int16, count: Int16]
  - ret: [data: Array_Double_c] 

- get_abort_threshold:
  - op : 96
  - arg: [abort_id: Int16]
  - ret: [threshold: Double]

- set_abort_threshold:
  - op : 97
  - arg: [abort_id: Int16, threshold: Double]
  - ret: null

# ------------------------------- SENSOR MONITOR ------------------------------------
- get_sensor_monitor_enable_mask:
  - op : 110
  - arg: null
  - ret: [enable_mask: UInt16]
  - eeprom : null
  - desc: |
            get sensor monitor enable mask

- set_sensor_monitor_enable_mask:
  - op : 111
  - arg: [enable_mask: UInt16]
  - ret: null
  - getter_op : 110
  - desc: |
            set sensor monitor enable mask

- get_sensor_monitor_debounce_ms:
  - op : 112
  - arg: [id: UInt16]
  - ret: [debounce_ms: UInt32]
  - eeprom : [id: 4]
  - desc: |
            get sensor monitor debounce time in milisecond
            
- set_sensor_monitor_debounce_ms:
  - op : 113
  - arg: [id: UInt16, debounce_ms: UInt32]
  - ret: null
  - getter_op : 112
  - desc: |
            set sensor monitor debounce time in milisecond
            
- get_sensor_monitor_threshold:
  - op : 114
  - arg: [id: UInt16]
  - ret: [upper_limit: Double, lower_limit: Double]
  - eeprom : [id: 4]
  - desc: |
            get sensor monitor upper and lower threshold for corresponding channel

- set_sensor_monitor_threshold:
  - op : 115
  - arg: [id: UInt16, upper_limit: Double, lower_limit: Double]
  - ret: [success : Boolean]
  - getter_op : 114
  - desc: |
            set sensor monitor upper and lower threshold for corresponding channel

# -------------------------- Temerature control ------------------------------------
- set_temp_offset:
  - op  : 120
  - arg : [id: UInt16, offset: Double]
  - ret : null
  - getter_op : 121
  - desc: Set temperature offset for correcting the reading of temperature in celcius

- get_temp_offset:
  - op  : 121
  - arg : [id: UInt16]
  - ret : [offset: Double]
  - eeprom : [id: 2]
  - desc: Get temperature offset for correcting the reading of temperature in celcius
  
- set_steinhart_temperature_coeficient:
  - op  : 122
  - arg : [id: UInt16, A: Double, B: Double, C: Double]
  - ret : null
  - getter_op : 123
  - desc: Set steinhart coeficient of temperature sensor id is same as controller id

- get_steinhart_temperature_coeficient:
  - op  : 123
  - arg : [id: UInt16]
  - ret : [A: Double, B: Double, C: Double]
  - eeprom : [id: 2]
  - desc: Get steinhart coeficient of temperature sensor id is same as controller id

- set_thermistor_coefficient:
  - op  : 124
  - arg : [id: UInt16, r_divider: Double, off_volt_input: Double, voltage_divider: Double]
  - ret : null
  - getter_op : 125
  - desc: Set thermistor circuit configuration id is same as controller id

- get_thermistor_coefficient:
  - op  : 125
  - arg : [id: UInt16]
  - ret : [r_divider: Double, off_volt_input: Double, voltage_divider: Double]
  - eeprom : [id: 2]
  - desc: Get thermistor circuit configuration sensor id is same as controller id

- read_temperature_sensor:
  - op  : 126
  - arg : [id: UInt16]
  - ret : [value: Double]
  - desc: Read temperature sensor value

- read_temp_adc_raw:
  - op  : 127
  - arg : [id: UInt16]
  - ret : [value: UInt16]
  - desc: Read temperature sensor ADC raw value

- set_temp_lpf_cutoff:
  - op  : 128
  - arg : [id: UInt16, enable: Boolean, cut_off_hz: Double]
  - ret : null
  - getter_op : 129
  - desc: set temp sensor lpf freq in hz

- get_temp_lpf_cutoff:
  - op  : 129
  - arg : [id: UInt16]
  - ret : [enable: Boolean, cut_off_hz: Double]
  - eeprom : [id: 2]
  - desc: get temp sensor lpf freq in hz

# ==================== Temperature Controller =====================================================
- set_temp_controller_target:
  - op  : 130
  - arg : [id: Int16, value: Double]
  - ret : null
  - getter_op : 131
  - desc: Set temperature target in celcius

- get_temp_controller_target:
  - op  : 131
  - arg : [id: Int16]
  - ret : [value: Double]
  - eeprom : [id: 2]
  - desc: Get temperature target in celcius

- set_temp_controller_enable:
  - op  : 132
  - arg : [id: Int16, value: UInt16]
  - ret : [success: Boolean]
  - desc: Set temperature control enabled 0 = disabled, 1 = enabled

- get_temp_controller_enable:
  - op  : 133
  - arg : [id: Int16]
  - ret : [enabled: UInt16]
  - desc: Get temperature control enabled 0 = disabled, 1 = enabled

- set_temp_controller_pid:
  - op  : 134
  - arg : [id: Int16, p: Double, i: Double, d: Double, iLimH: Double, iLimL: Double]
  - ret : null
  - getter_op : 135
  - desc: Set temperature control pid gains

- get_temp_controller_pid:
  - op  : 135
  - arg : [id: Int16]
  - eeprom : [id: 2]
  - ret : [p: Double, i: Double, d: Double, iLimH: Double, iLimL: Double]

  - desc: Get temperature control pid gains

- set_temp_controller_deadband:
  - op  : 136
  - arg : [id: Int16, lower: Double, upper: Double]
  - ret : null
  - getter_op : 137
  - desc: Set temperature control pid deadband in Celcius relative from target

- get_temp_controller_deadband:
  - op  : 137
  - arg : [id: Int16]
  - ret : [lower: Double, upper: Double]
  - eeprom : [id: 2]
  - desc: Get temperature control pid deadband

- get_temp_controller_out:
  - op  : 139
  - arg : [id: Int16]
  - ret : [value: Double]
  - desc: Get temperature controller pwm out in percentage

- set_temp_controller_auto:
  - op  : 140
  - arg : [id: Int16, auto: Int16]
  - ret : null
  - desc: Set temperature control auto, if 0 = we can manually control the actuator, if 1 we cannot control manually actuator output

- get_temp_controller_auto:
  - op  : 141
  - arg : [id: Int16]
  - ret : [auto: Int16]
  - desc: Get temperature controller auto

- set_temp_controller_period:
  - op  : 142
  - arg : [id: Int16, period: UInt32]
  - ret : null
  - getter_op : 143
  - desc: Set temperature controller period in micro seconds

- get_temp_controller_period:
  - op  : 143
  - arg : [id: Int16]
  - ret : [period: UInt32]
  - eeprom : [id: 2]
  - desc: Get temperature controller period in micro seconds

- set_pwm_heater_range:
  - op  : 144
  - arg : [id: Int16, min_range: Double, max_range: Double]
  - ret : null
  - getter_op : 145
  - desc: set PWM range of the heater min and max

- get_pwm_heater_range:
  - op  : 145
  - arg : [id: Int16]
  - ret : [min_range: Double, max_range: Double]
  - eeprom : [id: 2]
  - desc: get PWM range of the heater min and max

- read_ntc_voltage:
  - op  : 146
  - arg : [id: Int16]
  - ret : [volt: Double]
  - desc: Get ntc sensor voltage readed on ADC

- read_ntc_resistance:
  - op  : 147
  - arg : [id: Int16]
  - ret : [res_ohm: Double]
  - desc: Get ntc sensor resistance calculated value

#-------------------------------- SEQUENCER ----------------------------------------------
- get_sequencer_info:
  - op  : 150
  - arg : null
  - ret : [status: UInt16, size: UInt16, count: UInt16, complete_run: UInt16]
  - desc: Reads sequencer current info

- clear_sequencer:
  - op  : 151
  - arg : null
  - ret : [uncompleted_count: UInt16]
  - desc: Clear all sequencer queue items.

- start_sequencer:
  - op  : 152
  - arg : null
  - ret : null
  - desc: Start sequencer

- abort_sequencer:
  - op  : 153
  - arg : null
  - ret : [uncompleted_count: UInt16]
  - desc: Abort after last sequence executions finished

- abort_sequencer_immediately:
  - op  : 154
  - arg : null
  - ret : [uncompleted_count: UInt16]
  - desc: Abort immediately current sequence execution

- queue_nop:
  - op  : 155
  - arg : [id: UInt32, duration_ms: UInt32]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: Add delay time to sequence wihtout operation

- queue_abort:
  - op  : 156
  - arg : [id: UInt32]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: Abort after last sequence executions finished

- queue_move:
  - op  : 157
  - arg : [id: UInt32, duration_ms: UInt32, relative: Boolean, wait_done: Boolean, motor_count: UInt16, motor_id: Array_Int16, pos: Array_Double, vel: Array_Double, acc: Array_Double]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: move motor sequence

- queue_set_abort_threshold:
  - op  : 158
  - arg : [id: UInt32, duration_ms: UInt32, abort_input_id: UInt16, threshold: Double, relative: Boolean, sensor_id: UInt16, average_point: UInt16]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: set abort threshold for abort inputs if relative is true, it can use for set threshold relative from sensor average reading

- queue_set_abort_config:
  - op  : 159
  - arg : [id: UInt32, duration_ms: UInt32, abort_id: UInt16, trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: set abort config, see abort config

- queue_set_temperature_control:
  - op  : 160
  - arg : [id: UInt32, duration_ms: UInt32, control_id: UInt16, turn_on: Boolean, target_temp: Double]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: set temperature controller if turn on is true it will set the temp to target, if false it ignore the target

- queue_wait_abort_before_move_done:
  - op  : 161
  - arg : [id: UInt32, duration_ms: UInt32, abort_id: UInt16, abort_mask: UInt32, motor_id: UInt16]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: wait for motion abort triggered, if motor done but abort not triggerd the sequencer will abort

- queue_wait_sensor_reach_before_move_done:
  - op  : 162
  - arg : [id: UInt32, duration_ms: UInt32, sensor_id: UInt16, threshold: Double, upper_threshold: Boolean, motor_id: UInt16]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: wait for sensor reach certain threshold, if sensor not reach after move done the sequencer will abort

- queue_wait_temp_reach:
  - op  : 163
  - arg : [id: UInt32, duration_ms: UInt32, temp_id: UInt16, target_temp: Double, tolerance: Double, timeout: UInt32]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: wait temperature sensor reach certain threshold on period time, if timeout happen it will abort the sequencer

- queue_set_sensor_monitor_threshold:
  - op  : 164
  - arg : [id: UInt32, duration_ms: UInt32, monitor_id: UInt16, upper_thres: Double, lower_thres: Double, isRelative: Boolean, sensor_id: UInt16, aver_point: UInt16, select_thres: UInt16]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: set sensor monitor threshold, if relative it will count the value base on relative average sensor, please see select_thres enum

- queue_wait_sensor_monitor_triggered_before_move_done:
  - op  : 165
  - arg : [id: UInt32, duration_ms: UInt32, monitor_id: UInt16, is_upper: Boolean, motor_id: UInt16, timeout_ms: UInt32]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: wait sensor monitor triggered before motor move done plus timeout if is_upper true it will detect isupper flag and vise versa, timeout is count after move done

- queue_start_dump_data:
  - op  : 166
  - arg : [id: UInt32, duration_ms: UInt32, sensor_count: UInt16, sensor_id: Array_Int16]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: starting to dump data for taking average and peak sensor value

- queue_analyze_dump_data:
  - op  : 167
  - arg : [id: UInt32, duration_ms: UInt32, start_sample: Double, end_sample: Double, cycle_num: UInt16]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: starting to analyze dump data for taking average and peak sensor value and stored to cycle buffer

- get_peak_data:
  - op  : 168
  - arg : [id: UInt16, index: UInt16, count: UInt16]
  - ret : [count: Int16, value: Array_Int16]
  - desc: get peak data from analyzed dump data

- get_average_data:
  - op  : 169
  - arg : [id: UInt16, index: UInt16, count: UInt16]
  - ret : [count: Int16, value: Array_Int16]
  - desc: get average data from analyzed dump data


# ------------------------------- TRINAMIC SPECIFIC ------------------------------------
- write_trinamic_register:
  - op : 170
  - arg: [id: Int16, address: UInt16, value: UInt32]
  - ret: null
  
- read_trinamic_register:
  - op : 171
  - arg: [id: Int16, address: UInt16]
  - ret: [value: UInt32]
  
- set_stallguard_config:
  - op : 172
  - arg: [id: Int16, enable: Boolean, vel_threshold : Double, stall_offset : Int16]
  - ret: null
  - getter_op : 173
  
- get_stallguard_config:
  - op : 173
  - arg: [id: Int16]
  - ret: [enable: Boolean, vel_threshold : Double, stall_offset : Int16]
  - eeprom : [id: 1]

- read_stallguard_result:
  - op : 174
  - arg: [id: Int16]
  - ret: [result : Int16]
  
- set_stealthchop_config:
  - op : 175
  - arg: [id: Int16, enable: Boolean, use_spreadcycle: Boolean, vel_threshold: Double]
  - ret: null
  - getter_op : 176

- get_stealthchop_config:
  - op : 176
  - arg: [id: Int16]
  - ret: [enable: Boolean, use_spreadcycle: Boolean, vel_threshold: Double]
  - eeprom : [id: 1]

- set_stealthchop_params:
  - op : 177
  - arg: [id: Int16, pwm_ofs: UInt16, pwm_grad: UInt16]
  - ret: null

- get_stealthchop_params:
  - op : 178
  - arg: [id: Int16]
  - ret: [pwm_ofs: UInt16, pwm_grad: UInt16]

- set_pwm_auto_scale:
  - op : 179
  - arg: [id: Int16, enable: Boolean]
  - ret: null

- get_pwm_auto_scale:
  - op : 180
  - arg: [id: Int16]
  - ret: [enable: Boolean]

- set_trinamic_hardware_config:
  - op : 181
  - arg: [id: Int16, rsense : Double, clk_mhz : UInt16]
  - ret: null
  - getter_op : 182

- get_trinamic_hardware_config:
  - op : 182
  - arg: [id: Int16]
  - ret: [rsense : Double, clk_mhz : UInt16]
  - eeprom : [id: 1]

- set_trinamic_driver_type:
  - op : 183
  - arg: [id: Int16, type : UInt16]
  - ret: null
  - getter_op : 184

- get_trinamic_driver_type:
  - op : 184
  - arg: [id: Int16]
  - ret: [type : UInt16]
  - eeprom : [id: 1]

# ------------------------------- Sequencer Extended ---------------------------------
- save_sequence_to_flash:
  - op  : 190
  - arg : null
  - ret : [success: Boolean]
  - desc: save sequence on flash

- load_sequence_from_flash:
  - op  : 191
  - arg : null
  - ret : [success: Boolean, size: UInt32]
  - desc: save sequence on flash

- get_length_data:
  - op  : 192
  - arg : [id: UInt16, index: UInt16, count: UInt16]
  - ret : [count: Int16, length: Array_UInt16_c]
  - desc: get total sampled data each dump

- reset_sequence_state:
  - op  : 193
  - arg : null
  - ret : null
  - desc: to reset sequence after sequence done or aborted

- queue_stop_device_log:
  - op  : 194
  - arg : [id: UInt32, duration_ms: UInt32]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: stop device logger

- set_sequence_version:
  - op  : 195
  - arg : [version: UInt32]
  - ret : null
  - desc: set the sequence version

- get_sequence_version:
  - op  : 196
  - arg : null
  - ret : [version: UInt32, total_count: UInt32]
  - desc: get the sequence version

- format_flash_sequencer:
  - op  : 197
  - arg : null
  - ret : null
  - desc: format sequencer storage

- queue_set_led_enable:
  - op  : 198
  - arg : [id: UInt32, duration_ms: UInt32, turn_on: Boolean]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: queue set led enable

- queue_slug_detect_before_move_done:
  - op  : 199
  - arg : [id: UInt32, duration_ms: UInt32, monitor_id: UInt16, motor_id: UInt16]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: wait sensor integral adc value is triggered before move done

# ------------------------------- Wifi Connection ------------------------------------
- set_ap_name:
  - op : 200
  - arg: [ap_name: String, passwd: String]
  - ret: null
  - getter_op : 201
  - desc: setting the access point name and password

- get_ap_name:
  - op : 201
  - arg: null
  - ret: [ap_name: String, passwd: String]
  - eeprom : null
  - desc: get the access point name and password

- get_ip_addr:
  - op : 202
  - arg: null
  - ret: [ip_addr: String, subnet_mask: String, gateway: String]
  - desc: get ip address, if the connection is not establish, it will return 0000

- select_comport:
  - op : 203
  - arg: [use_wifi: UInt16]
  - ret: null
  - desc: select com port 0 = uart, 1 = blutooth, 2 = tcp with wifi

- get_wifi_signal_strength:
  - op : 204
  - arg: null
  - ret: [strength: Int16]
  - desc: get the WIFI signal strength in dbm

# ------------------------------- device logger (SD Card) ------------------------------------
- start_device_log:
  - op : 210
  - arg: [folder_name: String]
  - ret: [success: Boolean]
  - desc: start the device log, the log will save under the folder name

- stop_device_log:
  - op : 211
  - arg: null
  - ret: [success: Boolean]
  - desc: stop the device log

- get_log_running:
  - op : 212
  - arg: null
  - ret: [run: Boolean, folder_name: String]
  - desc: get the device log is running

- set_sensor_log_period:
  - op : 213
  - arg: [period_ms: UInt32]
  - ret: null
  - getter_op : 214
  - desc: set the device log sensor sampling period

- get_sensor_log_period:
  - op : 214
  - arg: null
  - ret: [period_ms: UInt32]
  - eeprom : null
  - desc: get the device log sensor sampling period

- start_read_file_log:
  - op : 215
  - arg: [folder_name: String, type: UInt16]
  - ret: [success: Boolean, fileSize: UInt32]
  - desc: start read log file, type 0 is sensor file and type 1 is sequence file

- stop_read_file_log:
  - op : 216
  - arg: [type: UInt16]
  - ret: [success: Boolean]
  - desc: type 0 is sensor file and type 1 is sequence file

- read_file_log:
  - op : 217
  - arg: [type: UInt16, offset: UInt32, size: UInt16]
  - ret: [size: UInt16, data: String]
  - desc: read the file string with offset and size, type 0 is sensor file and type 1 is sequence file

- delete_folder:
  - op : 218
  - arg: [folder_name: String]
  - ret: [success: Boolean]
  - desc: delete folder log

- get_folder_count:
  - op : 219
  - arg: null
  - ret: [count: UInt32]
  - desc: get folder count on root directory

- get_folder_name:
  - op : 220
  - arg: [idx: UInt32]
  - ret: [success: Boolean, name: String]
  - desc: get folder name by index

- remout_sdcard:
  - op : 221
  - arg: null
  - ret: [success: Boolean]
  - desc: re-mount SD card

- start_browse_folder:
  - op : 222
  - arg: null
  - ret: [success: Boolean]
  - desc: start to browse folder, this for start checking directory names on SD Card

- get_next_folder_name:
  - op : 223
  - arg: null
  - ret: [success: Boolean, name: String]
  - desc: getting the next folder name

- stop_browse_folder:
  - op : 224
  - arg: null
  - ret: [success: Boolean]
  - desc: stop browse folder on SD card

- update_device:
  - op : 225
  - arg: null
  - ret: [success: Boolean]
  - desc: it will return false if fail, but timeout if processing

- rollback_version:
  - op : 226
  - arg: null
  - ret: [success: Boolean]
  - desc: it will return false if fail, and reboot if success

- start_dump_bin_file:
  - op : 227
  - arg: null
  - ret: [success: Boolean]
  - desc: start dump binary file for update

- stop_dump_bin_file:
  - op : 228
  - arg: null
  - ret: [success: Boolean]
  - desc: stop dump binary file

- write_dump_bin_file:
  - op : 229
  - arg: [size: UInt16, data: Array_UInt16]
  - ret: [writen: UInt32]
  - desc: writing dump binary file for update


# ------------------------------- Sequencer Extended ---------------------------------
- queue_home_motor:
  - op  : 230
  - arg : [id: UInt32, duration_ms: UInt32, wait_done: Boolean, motor_id: Int16, flag: UInt16, pos_edge: Boolean, pos_dir: Boolean, slow_vel: Double, fast_vel: Double, accel: Double]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: queue home motor

- get_integral_data:
  - op  : 231
  - arg : [id: UInt16, index: UInt16, count: UInt16]
  - ret : [count: Int16, value: Array_Double]
  - desc: get peak data from analyzed dump data

- get_seq_time_lapse:
  - op  : 232
  - arg : null
  - ret : [time_lapse_ms: UInt32]
  - desc: get the sequencer running time lapse, if seq not run it will return 0

- queue_reload_if_signal_width_less_than:
  - op  : 233
  - arg : [id: UInt32, duration_ms: UInt32, width: Double, reload_length: UInt16]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: queue for reload sequencer to some lenghth if the signal width (in motor step) is less than setting

- queue_reload_if_motor_offset_dev_more_than:
  - op  : 234
  - arg : [id: UInt32, duration_ms: UInt32, reload_length: UInt16, retry: UInt16, threshold: Double, motor_id: UInt16]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: queue for reload sequencer to some lenghth if the motor offset is changed after second home more than threshold, it can be set for retry count

# ------------------------------ SD Card extended -----------------------------------
- read_file_log_compress:
  - op : 240
  - arg: [type: UInt16, offset: UInt32, size: UInt16, use_compress: Boolean]
  - ret: [act_size: UInt16, size_byte: UInt16, size: UInt16, data: Array_UInt16_c]
  - desc: mbuh

#------------------------------ ADS1115 extension -----------------------------------
- set_ADS1115_lpf_cutoff:
  - op  : 250
  - arg : [id: UInt16, enable: Boolean, cut_off_hz: Double]
  - ret : null
  - getter_op : 251
  - desc: set sensor lpf freq in hz

- get_ADS1115_lpf_cutoff:
  - op  : 251
  - arg : [id: UInt16]
  - ret : [enable: Boolean, cut_off_hz: Double]
  - eeprom : [id: 2]
  - desc: get sensor lpf freq in hz

#------------------------------ FDC1004 ---------------------------------------------
- get_FDC1004_enable_mask:
  - op  : 260
  - arg : null
  - ret : [mask: UInt16]
  - eeprom : null
  - desc: get FDC1004 the enable channel masking

- set_FDC1004_enable_mask:
  - op  : 261
  - arg : [mask: UInt16]
  - ret : null
  - getter_op : 261
  - desc: set FDC1004 the enable channel masking

- read_FDC1004_register:
  - op  : 262
  - arg : [address: UInt16]
  - ret : [value: UInt16]
  - desc: read FDC1004 register, please see FDC1004 datasheet at https://www.ti.com/lit/ds/symlink/fdc1004.pdf

- write_FDC1004_register:
  - op  : 263
  - arg : [address: UInt16, value: UInt16]
  - ret : null
  - desc: write FDC1004 register, please see FDC1004 datasheet at https://www.ti.com/lit/ds/symlink/fdc1004.pdf

- read_FDC1004_cap_value:
  - op  : 264
  - arg : [channel: UInt16]
  - ret : [value: Double, new_data: Boolean]
  - desc: read non filtered FDC1004 capacitance value in pico farads

- read_FDC1004_cap_all:
  - op  : 265
  - arg : null
  - ret : [value1: Double, value2: Double, value3: Double, value4: Double]
  - desc: read filtered FDC1004 capacitance value in pico farads

- get_FDC1004_lpf_config:
  - op  : 266
  - arg : [channel: UInt16]
  - ret : [enable_lpf: Boolean, lpf_cutoff: Double]
  - eeprom : [channel: 4]
  - desc: get lpf config for cap sensor

- set_FDC1004_lpf_config:
  - op  : 267
  - arg : [channel: UInt16, enable_lpf: Boolean, lpf_cutoff: Double]
  - ret : null
  - getter_op : 266
  - desc: set lpf config for cap sensor

################################### EVENTS #################################################
EVENTS:
# ---------------- motor ----------------------------------------------
- motor_move_started:
  - op  : 512
  - ret: [motor_id: Int16]
  - desc: Fired upon motor movement is started.

- motor_move_done:
  - op  : 513
  - ret: [motor_id: Int16, status: UInt16, position: Double]
  - desc: Fired upon motor movement is done, send the motor status and position. Check MotorStatusBitmask enum for motor status.

- motor_home_done:
  - op  : 514
  - ret: [motor_id: Int16, home_pos: Double, pos: Double]
  - desc: Fired upon motor homing is done, return abs_pos (absolute position), and pos (position after applying offset).

- motor_error_occured:
  - op  : 515
  - ret: [motor_id: Int16, motor_error_code: UInt16]
  - desc: Fired upon motor error is occured. Check MotorErrorCode enum for possible error code.

# ---------------- sensor monitor ---------------------------------------
- on_sensor_out_of_bound:
  - op  : 802
  - ret: [id: UInt16, limit_type: UInt16, value: Double]
  - desc: Fired upon sensor monitor out of counts

# ---------------- sequencer --------------------------------------------
- on_sequencer_started:
  - op  : 805
  - ret: null
  - desc: Fired when sequencer feature started
  
- on_sequencer_aborted:
  - op  : 806
  - ret: [id: UInt32, uncompleted_count: UInt16]
  - desc: Fired when sequencer feature aborted
  
- on_sequencer_item_run:
  - op  : 807
  - ret: [id: UInt32]
  - desc: Fired when sequence item specified by id begin executes

- on_sequencer_item_finish:
  - op  : 808
  - ret: [id: UInt32]
  - desc: Fired when sequence item specified by id sucessfully executed

- on_sequencer_all_finish:
  - op  : 809
  - ret: null
  - desc: Fired when all sequences item sucessfully executed

- on_sequencer_fault:
  - op  : 810
  - ret: [id: UInt32, uncompleted_count: UInt16]
  - desc: Fired when sequencer fault (motor fault)

- on_sequencer_save_finish:
  - op  : 811
  - ret: [saved_length: UInt32]
  - desc: Fired when sequecer saved to flash
