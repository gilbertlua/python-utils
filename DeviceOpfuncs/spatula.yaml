APPNAME: Spatula Control
VERSION: v0.1.0

################################### ENUMS & BITMASKS #################################################-
ENUMS:
- MotorErrorCode:
  - desc : Motor error code
  - type : UInt16
  - value:
    - mecodeNone : [0, No Error]
    - mecodeInvalidID : [1, Invalid Motor ID]
    - mecodeLowerLimit : [2, Motor hit Lower Limit switch]
    - mecodeUpperLimit : [3, Motor hit Upper Limit switch]
    - mecodeIllegalPos : [4, Illegal Position]
    - mecodeIllegalVel : [5, Illegal Velocity]
    - mecodeIllegalAcc : [6, Illegal Acceleration]
    - mecodeAborted : [7, Motor Stopped by Motion Abort]
    - mecodeFolErrorIdle : [8, Encoder doesn't match Motor position while Idle]
    - mecodeFolErrorMoving : [9, Encoder doesn't match Motor position while Moving]
    - mecodeEncoderError : [10, Encoder error]
    - mecodeDisabled : [11, Motor is disabled]
    - mecodeHoming : [12, Motor is homing]
    - mecodeEmergencyStop : [13, Emergency Stop is activated]
    - mecodeHardBrake : [14, Hard Brake is activated]
    - mecodeDriverFault : [15, Motor driver fault signal is triggered]
    - mecNoMove : [16, Motor move to the same position]
    - mecMoveNotSupported : [17, some movement can't b overidden ( s-curve)]
    - mecIllegalJrk : [18, illegal jerk (s-curve)]
    - mecStalled : [19, motor stalled detected using trinamic stallguard]

- MotorStatusBitmask:
  - desc : Bitmask for motor status code (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - msbitMoving : [1, Motor is moving]
    - msbitHoming : [2, Motor is homing]
    - msbitHomed : [4, Motor is already homed]
    - msbitLowerLimit : [8, LowerLimit switch is hit]
    - msbitUpperLimit : [16, UpperLimit switch is hit]
    - msbitOverCurrent : [32, Motor overcurrent]
    - msbitAborted : [64, Motor motion abort is triggered]
    - msbitFolErrorIdle : [128, Following Error while motor is idle]
    - msbitFolErrorMoving : [256, Following Error while motor is moving]
    - msbitEncoderError : [512, Encode Error]
    - msbitDisabled : [1024, Motor is Disabled]
    - msbitEmergencyStop : [2048, Emergency Stop is triggered]
    - msbitHardBrake : [4096, HardBrake is triggered]
    - msbitDriverFault : [8192, Motor driver fault signal is triggered]

- MotorInputBitmask:
  - desc : Bitmask for motor input code (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - mibitHomeSwitch : [1, motor homing switch]
    - mibitLowerLimit : [2, motor lower limit switch]
    - mibitUpperLimit : [4, motor upper limit switch]
    - mibitEnableSwitch : [8, motor enable switch]
    - mibitAbortFlag : [16, motor abort flag]
    - mibitDriverFault : [32, motor driver fault signal]

- LoggerTickBitmask:
  - desc : Bitmask for activation of logger tick (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - logbitIndexActive : [1, Activate logging index]

- LoggerMotorBitmask:
  - desc : Bitmask for activation of motor data logging (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - logbitAdcMotorCurrentA : [1, Raw ADC value of Motor Coil A Current sensor reading (Current = ADCvalue * CurrsensorScale + CurrsensorOffset)]
    - logbitAdcMotorCurrentB : [2, Raw ADC value of Motor Coil B Current sensor reading (Current = ADCvalue * CurrsensorScale + CurrsensorOffset)]
    - logbitMotorCurrentError : [4, PID Current Error (Ampere * 1e4 + 32768)]
    - logbitMotorCurrentSetpoint : [8, PID Current Setpoint (Ampere * 1e4 + 32768)]
    - logbitMotorControlOut : [16, Motor PID total Control output]
    - logbitMotorPwmA : [32, PWM of Motor Coil A]
    - logbitMotorPwmB : [64, PWM of Motor Coil B]
    - logbitMotorVelocity : [128, Velocity of Motor (Velocity * 10  + 32768)]

# - AbortInputBitmask:
  # - desc : Bitmask for activating input of motion abort
  # - type : UInt32
  # - Value:
    # - Motor0Fault : [1, motor 0 fault active high]
    # - Motor1Fault : [2, motor 1 fault active high]
    # - Estop : [4, Estop Signal active low]
    # - TouchOff : [8, Touch off Signal active low]
    # - DoorOpen : [16, Door Open signal active low]
    # - TrashBin : [32, Trash Bin signal active low]
    # - DoorClosed : [64, Door Open signal active low]

# - AbortId:
  # - desc : Id for abort object
  # - type : Int16
  # - Value:
    # - Motor0 : [0, motor 0 it will stop motor with deceleration if aborted]
    # - Motor1 : [1, motor 1 it will stop motor with deceleration if aborted]
    # - Estop : [2, Estop it will give low signal to bus if aborted]
    # - TouchOff : [3, Touch off it will give low signal to bus if aborted]

# - InputMonitorMask:
  # - desc : Bitmask for activating input monitor also value for read input
  # - type : UInt32
  # - Value:
    # - Estop : [1, Estop Signal active low]
    # - TouchOff : [2, Touch off Signal active low]
    # - DoorOpen : [4, Door Open signal active low]
    # - TrashBin : [8, Trash Bin signal active low]
    # - DoorClosed : [16, Door Open signal active low]

# - profile_type:
  # mpNoRamp = 0,
  # mpTrapzoid = 1,
  # mpSCurve = 2

################################### COMMANDS #################################################
COMMANDS:
- save_configuration:
  - op  : 3
  - arg : null
  - ret : null
  - desc: Save configuration to EEPROM
  
- hang_firmware:
  - op  : 9
  - arg : null
  - ret : null
  - desc: Save configuration to EEPROM

- set_address:
  - op  : 100
  - arg : [addr : Int16]
  - ret : null
  - desc: Set device address

#---------------------------------------- MOTOR ------------------------------------
- get_motor_limits:
  - op  : 10
  - arg : [motor_id: Int16]
  - ret : [min_limit: Double, max_limit: Double]
  - eeprom : [motor_id: 1]
  - desc: Get motor position limits

- set_motor_limits:
  - op  : 11
  - arg : [motor_id: Int16, min_limit: Double, max_limit: Double]
  - ret : null
  - getter_op : 10
  - desc: Set motor position limits (e.g. min -4000 max 4000)  

- get_motor_currents:
  - op  : 12
  - arg : [motor_id: Int16]
  - ret : [boost: Double, travel: Double, hold: Double]
  - eeprom : [motor_id: 1]
  - desc: Get motor current (Ampere) setting. Boost is acceleration current, travel is moving current, hold is holding current

- set_motor_currents:
  - op  : 13
  - arg : [motor_id: Int16, boost: Double, travel: Double, hold: Double]
  - ret : null
  - getter_op : 12
  - desc: Set motor current (Ampere). Boost is acceleration current, travel is moving current, hold is holding current

- get_motor_config:
  - op  : 14
  - arg : [motor_id: Int16]
  - ret : [invert_dir: Boolean, kp: Double, ki: Double, kd: Double, num_usteps: Int16]
  - eeprom : [motor_id: 1]
  - desc: Get motor config. Invert_dir is motor direction inversion flag. Kp, Ki, Kd is PID gain. Currently, Kd and num_usteps cannot be changed.

- set_motor_config:
  - op  : 15
  - arg : [motor_id: Int16, invert_dir: Boolean, kp: Double, ki: Double, kd: Double, num_usteps: Int16]
  - ret : null
  - getter_op : 14
  - desc: Set motor config. Invert_dir is motor direction inversion flag. Kp, Ki, Kd is PID gain. num_usteps is number of substep for each step.

- read_motor_inputs:
  - op  : 16
  - arg : [motor_id: Int16]
  - ret : [motor_inputs: Int16]
  - desc: Read various motor inputs, collected as bitmasks (1 is Active). Check MotorInputBitmask for the bitmask details.

- clear_motor_fault:
  - op  : 17
  - arg : [motor_id: Int16]
  - ret : null
  - desc: Clear motor faults. You should send this before moving motor, every time motor failure occurs.

- get_motor_open_loop:
  - op  : 18
  - arg : [motor_id: Int16]
  - ret : [is_open_loop: Boolean]
  - desc: Returns false if motor is not in open loop control mode, true otherwise.

- set_motor_open_loop:
  - op  : 19
  - arg : [motor_id: Int16, is_open_loop: Boolean]
  - ret : null
  - desc: Set use_openloop to True, to activate open loop control mode. is_error will be True if motor mode cannot be set (e.g. while still moving).

- get_motor_status:
  - op  : 20
  - arg : [motor_id: Int16]
  - ret : [motor_status: UInt16]
  - desc: Get motor status. Check MotorStatusBitmask under ENUMS section.

- home_motor:
  - op  : 21
  - arg : [motor_id: Int16, flag: UInt16, pos_edge: Boolean, pos_dir: Boolean, slow_vel: Double, fast_vel: Double, accel: Double, jerk: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Home motor. Automatically set motor position to 0 upon finished. Delidder used home switch only for homing
          Arguments
          - flag     -> Always set this to 0 for now. 
          - pos_edge -> False to detect falling edge homing sensor signal, True to detect rising edge
          - pos_dir  -> Movement direction, set False to reverse.
          - slow_vel -> Initial velocity before home switch is activated.
          - fast_vel -> Velocity after home switch is activated (finding precise home location).
          - accel    -> Motor motion acceleration.
          - jerk     -> Motor jerk.

          Returns
          - motor_error -> Check MotorErrorCode in ENUMS section


- move_motor_abs:
  - op  : 22
  - arg : [motor_id: Int16, pos: Double, vel: Double, acc: Double, jrk: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Move motor to an absolute position
          Arguments
          - pos -> Target position, should be within position limit
          - vel -> Motor Velocity
          - acc -> Motor Acceleration
          - jrk     -> Motor Jerk (optional, depends on profile type)

          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- move_motor_vel:
  - op  : 23
  - arg : [motor_id: Int16, forward: Boolean, vel: Double, accel: Double, jrk: Double, isContinous: Boolean]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Move motor with certain velocity, stopped when position limit is reached.
          Arguments
          - forward -> Set to False to inverse direction.
          - vel     -> Motor velocity
          - acc     -> Motor Acceleration
          - jrk     -> Motor Jerk (optional, depends on profile type)
          - isContinous -> Motor will move continous if true
          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- stop_motor:
  - op  : 24
  - arg : [motor_id: Int16, accel: Double, jrk: Double]
  - ret : [motor_error_code: UInt16]
  - desc: Stop motor, even if its moving, with inputed acceleration set in accel. Return MotorErrorCode enum.

- abort_motor:
  - op : 25
  - arg : [motor_id: Int16]
  - ret : [motor_error_code: UInt16]
  - desc: Stop motor with predetermined acceleration (56000). Return MotorErrorCode enum.

- get_motor_pos:
  - op  : 27
  - arg : [motor_id: Int16]
  - ret : [curr_pos: Double, curr_vel: Double, curr_acc: Double]
  - desc: Get current motor position.

- set_motor_pos:
  - op  : 28
  - arg : [motor_id: Int16, pos: Double]
  - ret : null
  - desc: Manually set current motor position.

#---------------------------------------- MOTOR EXTENDED 1------------------------------------
- set_motor_enabled:
  - op  : 47
  - arg : [motor_id: Int16, enable: Boolean]
  - ret : null
  - desc: Set enable to True to enable motor, False to disable.

- get_motor_deceleration:
  - op  : 48
  - arg : [motor_id: Int16]
  - ret : [stop_decel: Double, abort_decel: Double, stop_abort_jerk: Double]
  - eeprom : [motor_id : 1]
  - desc: Get enable stop and abort deceleration in step/sec^2, and jerk in step/sec^3

- set_motor_deceleration:
  - op  : 49
  - arg : [motor_id: Int16, stop_decel: Double, abort_decel: Double, stop_abort_jerk: Double]
  - ret : null
  - getter_op : 48
  - desc: Set enable stop and abort deceleration in step/sec^2, and jerk in step/sec^3

#---------------------------- INPUT MONITOR ------------------------------------
- get_debouch_time_ms:
  - op  : 50
  - arg : null
  - ret : [mask: UInt32]
  - eeprom : null
  - desc: get the debouch time in ms

- set_debouch_time_ms:
  - op  : 51
  - arg : [mask: UInt32]
  - ret : null
  - getter_op : 50
  - desc: set the debouch time in ms

- get_input_mask:
  - op  : 52
  - arg : null
  - ret : [mask: UInt32]
  - eeprom : null
  - desc: get the input mask please see InputMonitorMask

- set_input_mask:
  - op  : 53
  - arg : [mask: UInt32]
  - ret : null
  - getter_op : 52
  - desc: set the input mask please see InputMonitorMask

- read_input_monitor_port_value:
  - op  : 54
  - arg : null
  - ret : [mask: UInt32]
  - desc: read the IO port (all bits)
  
# ------------------------------- FDC1004 Cap Sensor ------------------------------------
- read_aux_cap_value:
  - op  : 70
  - arg : [id: UInt16]
  - ret : [capasitance: Int32]
  - desc: Read FDC1004 capasitance sensor measurement, unit in femto farads

- get_aux_cap_reader_enable:
  - op  : 71
  - arg : null
  - ret : [enable: UInt16]
  - desc: Get FDC1004 capasitance sensor reader service enable

- set_aux_cap_reader_enable:
  - op  : 72
  - arg : [enable: UInt16]
  - ret : null
  - desc: Set FDC1004 capasitance sensor reader service enable

# -------------------------- ENCODER ------------------------------------
- get_encoder_config:
  - op  : 80
  - arg : [motor_id: Int16]
  - ret : [inverted: Boolean, count_per_step: Double]
  - eeprom : [id : 1]
  - desc: Get encoder inversion status (True if inverted) and encoder count per step.

- set_encoder_config:
  - op  : 81
  - arg : [motor_id: Int16, inverted: Boolean, count_per_step: Double]
  - ret : null
  - getter_op : 80
  - desc: Set encoder inversion status (True if inverted) and encoder count per step.

- get_fol_error_config:
  - op  : 82
  - arg : [motor_id: Int16]
  - ret : [is_tracking_enabled: Boolean, max_fol_error: Double]
  - eeprom : [id : 1]
  - desc: |
          Get following error (encoder count != motor position) config
          Returns
          - is_tracking_enabled -> True if following error is enabled
          - max_fol_error     -> Encoder count and motor position difference threshold that trigger the error.

- set_fol_error_config:
  - op  : 83
  - arg : [motor_id: Int16, is_tracking_enabled: Boolean, max_fol_error: Double]
  - ret : null
  - getter_op : 82
  - desc: |
          Set following error (encoder count != motor position) config
          Returns
          - is_tracking_enabled -> set to True to enable following error
          - max_fol_error     -> Encoder count and motor position difference threshold that trigger the error.

- get_encoder_position:
  - op  : 84
  - arg : [motor_id: Int16]
  - ret : [position: Double]
  - desc: get encoder position/counts
  
- get_encoder_correction_enable:
  - op : 86
  - arg : [id: Int16]
  - ret : [error_code: Int16, enable: Boolean]
  - eeprom : [id : 1]
  - exclude_eeprom : [error_code : Int16] # excluded return data, must be the same as name as the ret arguments
  - desc: |
          Get encoder correction enable
          - id -> motor id
          - enable -> enable the encoder correction
          - error_code -> success if 0

- set_encoder_correction_enable:
  - op : 87
  - arg : [id: Int16, enable: Boolean]
  - ret : [error_code: Int16]
  - getter_op : 86
  - desc: |
          Get encoder correction enable
          - id -> motor id
          - enable -> enable the encoder correction
          - error_code -> success if 0

- get_encoder_correction_config:
  - op : 88
  - arg : [id: Int16]
  - ret : [error_code: Int16, ECp: Double, ECi: Double, ECd: Double, max_step_rate: Double, dead_band: Double]
  - eeprom : [id : 1]
  - exclude_eeprom : [error_code : Int16] # excluded return data, must be the same as name as the ret arguments
  - desc: |
          Get encoder correction config
          - id -> motor id
          - ECp -> error correction proportional value
          - max_step_rate -> maximum correction step / second
          - error_code -> success if 0

- set_encoder_correction_config:
  - op : 89
  - arg : [id: Int16, ECp: Double, ECi: Double, ECd: Double, max_step_rate: Double, dead_band: Double]
  - ret : [error_code: Int16]
  - getter_op : 88
  - desc: |
          Set encoder correction config
          - id -> motor id
          - ECp -> error correction proportional value
          - max_step_rate -> maximum correction step / second
          - error_code -> success if 0

# ------------------------------- MOTION ABORT ------------------------------------
- get_abort_config:
  - op  : 90
  - arg : [abort_id: Int16]
  - ret : [trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - desc: please see AbortInputBitmask and AbortId

- set_abort_config:
  - op : 91
  - arg: [abort_id: Int16, trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - ret: null
  - desc: please see AbortInputBitmask and AbortId

- clear_triggered_inputs:
  - op : 92
  - arg: [abort_id: Int16]
  - ret: null

- get_triggered_inputs:
  - op : 93
  - arg: [abort_id: Int16]
  - ret: [input_mask: UInt32]

- get_triggered_positions:
  - op : 94
  - arg: [abort_id: Int16, first_input: Int16, count: Int16]
  - ret: [data: Array_Double_c]

- get_triggered_value:
  - op : 95
  - arg: [abort_id: Int16, first_input: Int16, count: Int16]
  - ret: [data: Array_Double_c] 

- get_abort_threshold:
  - op : 96
  - arg: [abort_id: Int16]
  - ret: [threshold: Double]

- set_abort_threshold:
  - op : 97
  - arg: [abort_id: Int16, threshold: Double]
  - ret: null

#---------------------------------- MOTOR EXTENSION -----------------------------------
- get_profile_list:
  - op  : 130
  - arg : [motor_id: Int16]
  - ret : [count: Int16, data: Array_Int16_c]
  - desc: Obtain list of available motion profile types

- get_active_profile:
  - op  : 131
  - arg : [motor_id: Int16]
  - ret : [profile_type: Int16]
  - eeprom : [motor_id : 1]
  - desc: Get the currently active profile
  
- set_active_profile:
  - op  : 132
  - arg : [motor_id: Int16, profile_type: Int16]
  - ret : [ret_code: Int16]
  - getter_op : 131
  - desc: Set active profile, returns 1 if success

- move_multi_motor_abs:
  - op  : 133
  - arg : [motor_count: UInt16, motor_id: Array_Int16, pos: Array_Double, vel: Array_Double, acc: Array_Double]
  - ret : [motor_error_code: Array_UInt16]
  - desc: |
          Move motor to an absolute position
          Arguments
          - pos -> Target position, should be within position limit
          - vel -> Motor Velocity
          - acc -> Motor Acceleration
          
          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- get_motor_enabled:
  - op  : 136
  - arg : [id: UInt16]
  - ret : [isEnabled: Boolean]
  - desc: get motor enabled

- set_motor_enable_on_start:
  - op  : 137
  - arg : [id: UInt16, isEnabled: Boolean]
  - ret : null
  - getter_op : 138
  - desc: set motor enabled on start

- get_motor_enable_on_start:
  - op  : 138
  - arg : [id: UInt16]
  - ret : [isEnabled: Boolean]
  - eeprom : [id: 1]
  - desc: get motor enabled on start


# ------------------------------- HOBBY SERVO MOTION ------------------------------------
- set_servo_motion_position:
  - op : 220
  - arg: [id: UInt16, position: Double, speed: Double]
  - ret: [success : Boolean]
  - desc: |
            Set servo position given by Id, position scale and speed scale (0 to 1)
        
- get_servo_motion_position:
  - op : 221
  - arg: [id: UInt16]
  - ret: [position : Double]
  - desc: | 
            Get servo position given by Id, returns it's position scale (0 to 1)
  
- get_servo_motion_status:
  - op : 222
  - arg: [id: UInt16]
  - ret: [status : UInt16]
  - desc: |
           Get servo status given by Id, returns (0: INVALID Id, 1: STANDBY, 2: INCREMENTING, 3: DECREMENTING)
  
- set_servo_motion_config:
  - op : 223
  - arg: [id: UInt16, period_us: UInt16, upper_limit: Double, lower_limit: Double]
  - ret: null
  - getter_op : 224
  - desc: |
            set servo duty cycle limit
            return false if upper_limit<lower limit and vice versa
  
- get_servo_motion_config:
  - op : 224
  - arg: [id: UInt16]
  - ret: [period_us: UInt16,upper_limit: Double, lower_limit: Double]
  - eeprom : [id: 1]
  - desc: |
            get servo duty cycle limit

- set_servo_motion_initial_position:
  - op : 225
  - arg: [id: UInt16, enable: Boolean, pos: Double]
  - ret: [status: Boolean]
  - getter_op : 226
  - desc: |  
            set servo initial position
            when device turn on

- get_servo_motion_initial_position:
  - op : 226
  - arg: [id: UInt16]
  - ret: [enable: Boolean, pos: Double]
  - eeprom : [id: 1]
  - desc: |  
            get servo initial position
            when device turn on

- abort_servo_motion:
  - op : 227
  - arg: [id : UInt16]
  - ret: [position : Double]
  - desc: |
            Abort in motion servo given by id. Returns last position otherwise -1.0 if wrong id was given. 

- set_servo_motion_enable:
  - op : 228
  - arg: [id : UInt16, enable : Boolean]
  - ret: null
  - desc: |
            Enable/disable servo 

- get_servo_motion_enable:
  - op : 229
  - arg: [id : UInt16]
  - ret: [enable : Boolean]
  - desc: |
            get enable/disable servo

# ------------------------------- TRINAMIC SPECIFIC ------------------------------------
- write_trinamic_register:
  - op : 240
  - arg: [id: Int16, address: UInt16, value: UInt32]
  - ret: null
  
- read_trinamic_register:
  - op : 241
  - arg: [id: Int16, address: UInt16]
  - ret: [value: Int32]

- set_chopconf_config:
  - op : 242
  - arg: [id: Int16, tbl: UInt16, toff : UInt16, hstart : UInt16, hend : UInt16]
  - ret: null
  
- get_chopconf_config:
  - op : 243
  - arg: [id: Int16]
  - ret: [tbl: UInt16, toff : UInt16, hstart : UInt16, hend : UInt16]


# - set_stallguard_config:
#   - op : 242
#   - arg: [id: Int16, enable: Boolean, vel_threshold : Double, stall_offset : Int16]
#   - ret: null
  
# - get_stallguard_config:
#   - op : 243
#   - arg: [id: Int16]
#   - ret: [enable: Boolean, vel_threshold : Double, stall_offset : Int16]
  
- read_stallguard_result:
  - op : 244
  - arg: [id: Int16]
  - ret: [result : Int16]
  
- set_stealthchop_config:
  - op : 245
  - arg: [id: Int16, enable: Boolean, use_spreadcycle: Boolean, vel_threshold: Double]
  - ret: null

- get_stealthchop_config:
  - op : 246
  - arg: [id: Int16]
  - ret: [enable: Boolean, use_spreadcycle: Boolean, vel_threshold: Double]
  
- set_stealthchop_params:
  - op : 247
  - arg: [id: Int16, pwm_ofs: UInt16, pwm_grad: UInt16]
  - ret: null

- get_stealthchop_params:
  - op : 248
  - arg: [id: Int16]
  - ret: [pwm_ofs: UInt16, pwm_grad: UInt16]
  
- set_auto_pwm_enable:
  - op : 249
  - arg: [id: Int16, enable : Boolean]
  - ret: null

- get_auto_pwm_enable:
  - op : 250
  - arg: [id: Int16]
  - ret: [enable : Boolean]

- write_trinamic_driver_register:
  - op : 251
  - arg: [id: Int16, address: UInt16, value: UInt32]
  - ret: null
  
- read_trinamic_driver_register:
  - op : 252
  - arg: [id: Int16, address: UInt16]
  - ret: [value: UInt32]

################################### EVENTS #################################################
EVENTS:
- motor_move_started:
  - op  : 512
  - ret: [motor_id: Int16]
  - desc: Fired upon motor movement is started.

- motor_move_done:
  - op  : 513
  - ret: [motor_id: Int16, status: UInt16, position: Double]
  - desc: Fired upon motor movement is done, send the motor status and position. Check MotorStatusBitmask enum for motor status.

- motor_home_done:
  - op  : 514
  - ret: [motor_id: Int16, home_pos: Double, pos: Double]
  - desc: Fired upon motor homing is done, return abs_pos (absolute position), and pos (position after applying offset).

- motor_error_occured:
  - op  : 515
  - ret: [motor_id: Int16, motor_error_code: UInt16]
  - desc: Fired upon motor error is occured. Check MotorErrorCode enum for possible error code.

- max_out_reached:
  - op  : 516
  - ret: [motor_id: Int16]
  - desc: Fired upon motor current control maximum output control reached, this usually caused by not enough voltage to drive

- on_abs_encoder_average_finish:
  - op  : 517
  - ret: [id: Int16, pos: Double]
  - desc: Fired upon absolute encoder average position finish
  
- on_position_reached:
  - op : 518
  - ret: [motor_id: Int16, position: Double]

- on_input_changed:
  - op  : 801
  - ret: [input_id: UInt16, is_on: UInt16]
  - desc: Fired upon input monitor changed
  
- on_sensor_out_of_bound:
  - op  : 802
  - ret: [id: UInt16, limit_type: UInt16, value: Double]
  - desc: Fired upon sensor monitor out of counts

- on_servo_motion_finished:
  - op  : 803
  - ret: [id: UInt16, position: Double]
  - desc: Fired when spesific servo finished motion job

- on_sequencer_started:
  - op  : 805
  - ret: null
  - desc: Fired when sequencer feature started
  
- on_sequencer_aborted:
  - op  : 806
  - ret: [id: UInt32, uncompleted_count: UInt16]
  - desc: Fired when sequencer feature aborted
  
- on_sequencer_item_run:
  - op  : 807
  - ret: [id: UInt32]
  - desc: Fired when sequence item specified by id begin executes

- on_sequencer_item_finish:
  - op  : 808
  - ret: [id: UInt32]
  - desc: Fired when sequence item specified by id sucessfully executed

- on_sequencer_all_finish:
  - op  : 809
  - ret: null
  - desc: Fired when all sequences item sucessfully executed

- on_sequencer_fault:
  - op  : 810
  - ret: [id: UInt32, uncompleted_count: UInt16]
  - desc: Fired when sequencer fault (motor fault)

- on_timed_valve_action_start:
  - op  : 811
  - ret: [id: UInt16, isOpen: Boolean]
  - desc: Fired when timed valve with specified id and bit has started

- on_timed_valve_action_finish:
  - op  : 812
  - ret: [id: UInt16, isOpen: Boolean]
  - desc: Fired when timed valve with specified id and bit has finished

