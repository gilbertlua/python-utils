APPNAME: FLO_DECK
VERSION: v0.1.1

################################### ENUMS & BITMASKS #################################################-
ENUMS:
- MotorErrorCode:
  - desc : Motor error code
  - type : UInt16
  - value:
    - mecodeNone : [0, No Error]
    - mecodeInvalidID : [1, Invalid Motor ID]
    - mecodeLowerLimit : [2, Motor hit Lower Limit switch]
    - mecodeUpperLimit : [3, Motor hit Upper Limit switch]
    - mecodeIllegalPos : [4, Illegal Position]
    - mecodeIllegalVel : [5, Illegal Velocity]
    - mecodeIllegalAcc : [6, Illegal Acceleration]
    - mecodeAborted : [7, Motor Stopped by Motion Abort]
    - mecodeFolErrorIdle : [8, Encoder doesn't match Motor position while Idle]
    - mecodeFolErrorMoving : [9, Encoder doesn't match Motor position while Moving]
    - mecodeEncoderError : [10, Encoder error]
    - mecodeDisabled : [11, Motor is disabled]
    - mecodeHoming : [12, Motor is homing]
    - mecodeEmergencyStop : [13, Emergency Stop is activated]
    - mecodeHardBrake : [14, Hard Brake is activated]
    - mecodeDriverFault : [15, Motor driver fault signal is triggered]
    - mecNoMove : [16, Motor move to the same position]
    - mecMoveNotSupported : [17, some movement can't b overidden ( s-curve)]
    - mecIllegalJrk : [18, illegal jerk (s-curve)]
    - mecStalled : [19, motor stalled detected using trinamic stallguard]

- MotorStatusBitmask:
  - desc : Bitmask for motor status code (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - msbitMoving : [1, Motor is moving]
    - msbitHoming : [2, Motor is homing]
    - msbitHomed : [4, Motor is already homed]
    - msbitLowerLimit : [8, LowerLimit switch is hit]
    - msbitUpperLimit : [16, UpperLimit switch is hit]
    - msbitOverCurrent : [32, Motor overcurrent]
    - msbitAborted : [64, Motor motion abort is triggered]
    - msbitFolErrorIdle : [128, Following Error while motor is idle]
    - msbitFolErrorMoving : [256, Following Error while motor is moving]
    - msbitEncoderError : [512, Encode Error]
    - msbitDisabled : [1024, Motor is Disabled]
    - msbitEmergencyStop : [2048, Emergency Stop is triggered]
    - msbitHardBrake : [4096, HardBrake is triggered]
    - msbitDriverFault : [8192, Motor driver fault signal is triggered]

- MotorInputBitmask:
  - desc : Bitmask for motor input code (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - mibitHomeSwitch : [1, motor homing switch]
    - mibitLowerLimit : [2, motor lower limit switch]
    - mibitUpperLimit : [4, motor upper limit switch]
    - mibitEnableSwitch : [8, motor enable switch]
    - mibitAbortFlag : [16, motor abort flag]
    - mibitDriverFault : [32, motor driver fault signal]

- LoggerTickBitmask:
  - desc : Bitmask for activation of logger tick (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - logbitIndexActive : [1, Activate logging index]

- LoggerMotorBitmask:
  - desc : Bitmask for activation of motor data logging (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - logbitAdcMotorCurrentA : [1, Raw ADC value of Motor Coil A Current sensor reading (Current = ADCvalue * CurrsensorScale + CurrsensorOffset)]
    - logbitAdcMotorCurrentB : [2, Raw ADC value of Motor Coil B Current sensor reading (Current = ADCvalue * CurrsensorScale + CurrsensorOffset)]
    - logbitMotorCurrentError : [4, PID Current Error (Ampere * 1e4 + 32768)]
    - logbitMotorCurrentSetpoint : [8, PID Current Setpoint (Ampere * 1e4 + 32768)]
    - logbitMotorControlOut : [16, Motor PID total Control output]
    - logbitMotorPwmA : [32, PWM of Motor Coil A]
    - logbitMotorPwmB : [64, PWM of Motor Coil B]
    - logbitMotorVelocity : [128, Velocity of Motor (Velocity * 10  + 32768)]

# - AbortInputBitmask:
  # - desc : Bitmask for activating input of motion abort
  # - type : UInt32
  # - Value:
    # - Motor0Fault : [1, motor 0 fault active high]
    # - Motor1Fault : [2, motor 1 fault active high]
    # - Estop : [4, Estop Signal active low]
    # - TouchOff : [8, Touch off Signal active low]
    # - DoorOpen : [16, Door Open signal active low]
    # - TrashBin : [32, Trash Bin signal active low]
    # - DoorClosed : [64, Door Open signal active low]

# - AbortId:
  # - desc : Id for abort object
  # - type : Int16
  # - Value:
    # - Motor0 : [0, motor 0 it will stop motor with deceleration if aborted]
    # - Motor1 : [1, motor 1 it will stop motor with deceleration if aborted]
    # - Estop : [2, Estop it will give low signal to bus if aborted]
    # - TouchOff : [3, Touch off it will give low signal to bus if aborted]

# - InputMonitorMask:
  # - desc : Bitmask for activating input monitor also value for read input
  # - type : UInt32
  # - Value:
    # - Estop : [1, Estop Signal active low]
    # - TouchOff : [2, Touch off Signal active low]
    # - DoorOpen : [4, Door Open signal active low]
    # - TrashBin : [8, Trash Bin signal active low]
    # - DoorClosed : [16, Door Open signal active low]

################################### COMMANDS #################################################
COMMANDS:
- save_configuration:
  - op  : 3
  - arg : null
  - ret : null
  - desc: Save configuration to EEPROM
  
- hang_firmware:
  - op  : 9
  - arg : null
  - ret : null
  - desc: Save configuration to EEPROM

- set_address:
  - op  : 100
  - arg : [addr : Int16]
  - ret : null
  - desc: Set device address

#---------------------------------------- MOTOR ------------------------------------
- get_motor_limits:
  - op  : 10
  - arg : [motor_id: Int16]
  - ret : [min_limit: Double, max_limit: Double]
  - eeprom : [motor_id : 4]
  - desc: Get motor position limits

- set_motor_limits:
  - op  : 11
  - arg : [motor_id: Int16, min_limit: Double, max_limit: Double]
  - ret : null
  - desc: Set motor position limits (e.g. min -4000 max 4000)  
  - getter_op : 10

- get_motor_currents:
  - op  : 12
  - arg : [motor_id: Int16]
  - ret : [boost: Double, travel: Double, hold: Double]
  - eeprom : [motor_id : 4]
  - desc: Get motor current (Ampere) setting. Boost is acceleration current, travel is moving current, hold is holding current

- set_motor_currents:
  - op  : 13
  - arg : [motor_id: Int16, boost: Double, travel: Double, hold: Double]
  - ret : null
  - getter_op : 12
  - desc: Set motor current (Ampere). Boost is acceleration current, travel is moving current, hold is holding current

- get_motor_config:
  - op  : 14
  - arg : [motor_id: Int16]
  - ret : [invert_dir: Boolean, kp: Double, ki: Double, kd: Double, num_usteps: Int16]
  - eeprom : [motor_id : 4]
  - desc: Get motor config. Invert_dir is motor direction inversion flag. Kp, Ki, Kd is PID gain. Currently, Kd and num_usteps cannot be changed.

- set_motor_config:
  - op  : 15
  - arg : [motor_id: Int16, invert_dir: Boolean, kp: Double, ki: Double, kd: Double, num_usteps: Int16]
  - ret : null
  - getter_op : 14
  - desc: Set motor config. Invert_dir is motor direction inversion flag. Kp, Ki, Kd is PID gain. num_usteps is number of substep for each step.


- read_motor_inputs:
  - op  : 16
  - arg : [motor_id: Int16]
  - ret : [motor_inputs: Int16]
  - desc: Read various motor inputs, collected as bitmasks (1 is Active). Check MotorInputBitmask for the bitmask details.

- clear_motor_fault:
  - op  : 17
  - arg : [motor_id: Int16]
  - ret : null
  - desc: Clear motor faults. You should send this before moving motor, every time motor failure occurs.

- get_motor_open_loop:
  - op  : 18
  - arg : [motor_id: Int16]
  - ret : [is_open_loop: Boolean]
  - eeprom : [motor_id : 4]
  - desc: Returns false if motor is not in open loop control mode, true otherwise.

- set_motor_open_loop:
  - op  : 19
  - arg : [motor_id: Int16, is_open_loop: Boolean]
  - ret : null
  - getter_op : 18
  - desc: Set use_openloop to True, to activate open loop control mode. is_error will be True if motor mode cannot be set (e.g. while still moving).

- get_motor_status:
  - op  : 20
  - arg : [motor_id: Int16]
  - ret : [motor_status: UInt16]
  - desc: Get motor status. Check MotorStatusBitmask under ENUMS section.

- home_motor:
  - op  : 21
  - arg : [motor_id: Int16, flag: UInt16, pos_edge: Boolean, pos_dir: Boolean, slow_vel: Double, fast_vel: Double, accel: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Home motor. Automatically set motor position to 0 upon finished. Delidder used home switch only for homing
          Arguments
          - flag     -> Always set this to 0 for now. 
          - pos_edge -> False to detect falling edge homing sensor signal, True to detect rising edge
          - pos_dir  -> Movement direction, set False to reverse.
          - slow_vel -> Initial velocity before home switch is activated.
          - fast_vel -> Velocity after home switch is activated (finding precise home location).
          - accel    -> Motor motion acceleration.
          
          Returns
          - motor_error -> Check MotorErrorCode in ENUMS section


- move_motor_abs:
  - op  : 22
  - arg : [motor_id: Int16, pos: Double, vel: Double, acc: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Move motor to an absolute position
          Arguments
          - pos -> Target position, should be within position limit
          - vel -> Motor Velocity
          - acc -> Motor Acceleration
          
          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- move_motor_vel:
  - op  : 23
  - arg : [motor_id: Int16, forward: Boolean, vel: Double, accel: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Move motor with certain velocity, stopped when position limit is reached.
          Arguments
          - forward -> Set to False to inverse direction.
          - vel     -> Motor velocity
          - acc     -> Motor Acceleration

          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- stop_motor:
  - op  : 24
  - arg : [motor_id: Int16, accel: Double]
  - ret : [motor_error_code: UInt16]
  - desc: Stop motor, even if its moving, with inputed acceleration set in accel. Return MotorErrorCode enum.

- abort_motor:
  - op : 25
  - arg : [motor_id: Int16]
  - ret : [motor_error_code: UInt16]
  - desc: Stop motor with predetermined acceleration (56000). Return MotorErrorCode enum.

- get_motor_pos:
  - op  : 27
  - arg : [motor_id: Int16]
  - ret : [curr_pos: Double, curr_vel: Double, curr_acc: Double]
  - desc: Get current motor position.

- set_motor_pos:
  - op  : 28
  - arg : [motor_id: Int16, pos: Double]
  - ret : null
  - desc: Manually set current motor position.

- set_motor_duty_cycle:
  - op  : 29
  - arg : [motor_id: Int16, pct_a: Double, pct_b: Double]
  - ret : null
  - desc: Set the duty cycle of motor coil A and B (in percent/ 0-100). Only works on open loop mode. 

- move_multi_motor_abs:
  - op  : 34
  - arg : [motor_count: UInt16, motor_id: Array_Int16, pos: Array_Double, vel: Array_Double, acc: Array_Double]
  - ret : [motor_data_count: UInt16, motor_error_code: Array_UInt16_c]
  - desc: |
          Move motor to an absolute position
          Arguments
          - pos -> Target position, should be within position limit
          - vel -> Motor Velocity
          - acc -> Motor Acceleration
          
          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- set_motor_enabled:
  - op  : 47
  - arg : [motor_id: Int16, enable: Boolean]
  - ret : null
  - desc: Set enable to True to enable motor, False to disable.

# -------------------------- PPI related ---------------------------------------
- read_ppi_direction_bit:
  - op  : 50
  - arg : [id: UInt16]
  - ret : [direction: UInt16]
  - desc: |
            get the data direction of PPI IO

- write_ppi_direction_bit:
  - op  : 51
  - arg : [id: UInt16, direction: UInt16]
  - ret : null
  - desc: |
            set the data direction of PPI IO

- read_ppi_bit:
  - op  : 52
  - arg : [id: UInt16]
  - ret : [value: UInt16]
  - desc: get bit IO value

- write_ppi_bit:
  - op  : 53
  - arg : [id: UInt16, value: UInt16]
  - ret : null
  - desc: write bit PPI IO value

- set_ppi_words:
  - op  : 54
  - arg : [masks: UInt16]
  - ret : null
  - desc: Perform set operation on PPI outputs directly
  

#---------------------------- INPUT MONITOR ------------------------------------
- input_monitor_get_debouch_time_ms:
  - op  : 60
  - arg : null
  - ret : [mask: UInt32]
  - desc: get the debouch time in ms

- input_monitor_set_debouch_time_ms:
  - op  : 61
  - arg : [mask: UInt32]
  - ret : null
  - desc: set the debouch time in ms

- input_monitor_get_input_mask:
  - op  : 62
  - arg : null
  - ret : [mask: UInt32]
  - desc: get the input mask please see InputMonitorMask

- input_monitor_set_input_mask:
  - op  : 63
  - arg : [mask: UInt32]
  - ret : null
  - desc: set the input mask please see InputMonitorMask

- input_monitor_read_input:
  - op  : 64
  - arg : null
  - ret : [mask: UInt32]
  - desc: read the IO port (all bits)

# -------------------------- ENCODER ------------------------------------
- get_encoder_config:
  - op  : 80
  - arg : [motor_id: Int16]
  - ret : [inverted: Boolean, count_per_step: Double]
  - eeprom : [motor_id: 4]
  - desc: Get encoder inversion status (True if inverted) and encoder count per step.

- set_encoder_config:
  - op  : 81
  - arg : [motor_id: Int16, inverted: Boolean, count_per_step: Double]
  - ret : null
  - getter_op : 80
  - desc: Set encoder inversion status (True if inverted) and encoder count per step.

- get_fol_error_config:
  - op  : 82
  - arg : [motor_id: Int16]
  - ret : [is_tracking_enabled: Boolean, max_fol_error: Double]
  - eeprom : [motor_id: 4]
  - desc: |
          Get following error (encoder count != motor position) config
          Returns
          - is_tracking_enabled -> True if following error is enabled
          - max_fol_error     -> Encoder count and motor position difference threshold that trigger the error.
  
- set_fol_error_config:
  - op  : 83
  - arg : [motor_id: Int16, is_tracking_enabled: Boolean, max_fol_error: Double]
  - ret : null
  - getter_op: 82
  - desc: |
          Set following error (encoder count != motor position) config
          Returns
          - is_tracking_enabled -> set to True to enable following error
          - max_fol_error     -> Encoder count and motor position difference threshold that trigger the error.

- get_encoder_position:
  - op  : 84
  - arg : [motor_id: Int16]
  - ret : [position: Double]
  - desc: get encoder position/counts
  
- get_encoder_correction_enable:
  - op : 86
  - arg : [id: Int16]
  - ret : [error_code: Int16, enable: Boolean]
  - eeprom : [motor_id: 4]
  - exclude_eeprom : [error_code : Int16]
  - desc: |
          Get encoder correction enable
          - id -> motor id
          - enable -> enable the encoder correction
          - error_code -> success if 0



- set_encoder_correction_enable:
  - op : 87
  - arg : [id: Int16, enable: Boolean]
  - ret : [error_code: Int16]
  - getter_op: 86
  - desc: |
          Get encoder correction enable
          - id -> motor id
          - enable -> enable the encoder correction
          - error_code -> success if 0


- get_encoder_correction_config:
  - op : 88
  - arg : [id: Int16]
  - ret : [error_code: Int16, ECp: Double, max_step_rate: Double, dead_band: Double, sampling_rate: UInt32]
  - eeprom : [motor_id: 4]
  - exclude_eeprom : [error_code : Int16]
  - desc: |
          Get encoder correction config
          - id -> motor id
          - ECp -> error correction proportional value
          - max_step_rate -> maximum correction step / second
          - error_code -> success if 0


- set_encoder_correction_config:
  - op : 89
  - arg : [id: Int16, ECp: Double, max_step_rate: Double, dead_band: Double, sampling_rate: UInt32]
  - ret : [error_code: Int16]
  - getter_op : 88
  - desc: |
          Set encoder correction config
          - id -> motor id
          - ECp -> error correction proportional value
          - max_step_rate -> maximum correction step / second
          - error_code -> success if 0

#------------------------------ AS5047 Absolute encoder ---------------------------------
- get_abs_encoder_position:
  - op  : 70
  - arg : [id: Int16]
  - ret : [position: Double]
  - desc: get abs encoder position step

- get_abs_encoder_config:
  - op  : 71
  - arg : [id: Int16]
  - ret : [inverted: Boolean, count_per_rev: UInt16, motor_step_per_rev: UInt16]
  - eeprom: [id : 2]
  - desc: Get Absolute encoder inversion status (True if inverted) 

- set_abs_encoder_config:
  - op  : 72
  - arg : [id: Int16, inverted: Boolean, count_per_rev: UInt16, motor_step_per_rev: UInt16]
  - ret : null
  - getter_op: 71
  - desc: Set encoder inversion status (True if inverted) 

- start_abs_encoder_average_pos:
  - op  : 73
  - arg : [id: Int16, window: UInt16]
  - ret : [success: Boolean]
  - desc: Start averaging on absolute encoder, the output is on event average finish

- read_AS5047_register:
  - op  : 74
  - arg : [id: Int16, address: UInt16]
  - ret : [success: Boolean, value: UInt16]
  - desc: Read AS5047 absolute encoder regiter value at certain address

- write_AS5047_register:
  - op  : 75
  - arg : [id: Int16, address: UInt16, value: UInt16]
  - ret : [success: Boolean]
  - desc: Read AS5047 absolute encoder regiter value at certain address

# ------------------------------- MOTION ABORT ------------------------------------
- get_abort_config:
  - op  : 90
  - arg : [abort_id: Int16]
  - ret : [trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - desc: please see AbortInputBitmask and AbortId

- set_abort_config:
  - op : 91
  - arg: [abort_id: Int16, trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - ret: null
  - desc: please see AbortInputBitmask and AbortId

- clear_triggered_inputs:
  - op : 92
  - arg: [abort_id: Int16]
  - ret: null

- get_triggered_inputs:
  - op : 93
  - arg: [abort_id: Int16]
  - ret: [input_mask: UInt32]

- get_triggered_positions:
  - op : 94
  - arg: [abort_id: Int16, first_input: Int16, count: Int16]
  - ret: [data: Array_Double_c]

- get_triggered_value:
  - op : 95
  - arg: [abort_id: Int16, first_input: Int16, count: Int16]
  - ret: [data: Array_Double_c] 

- get_abort_threshold:
  - op : 96
  - arg: [abort_id: Int16]
  - ret: [threshold: Double]

- set_abort_threshold:
  - op : 97
  - arg: [abort_id: Int16, threshold: Double]
  - ret: null
  
#---------------------------- MISC GENERIC OPCODE 100-110 -----------------------------


#---------------------------- AUX ANALOG OUT PWM -----------------------------

- aux_pwm_read_value:
  - op  : 111
  - arg : [id: UInt16]
  - ret : [value: Double]
  - desc: get value in percentage from range

- aux_pwm_write_value:
  - op  : 112
  - arg : [id: UInt16, value: Double]
  - ret : null
  - desc: set value in percentage from range

- aux_pwm_get_freq:
  - op  : 113
  - arg : [id: UInt16]
  - ret : [value: UInt32]
  - desc: get freq analog out pwm in Hz

- aux_pwm_set_freq:
  - op  : 114
  - arg : [id: UInt16, value: UInt32]
  - ret : null
  - desc: set freq analog out pwm in Hz
  
- aux_pwm_get_params:
  - op  : 115
  - arg : [id: UInt16]
  - ret : [max_range: Double, min_range: Double]
  - eeprom: [id: 2]
  - desc: get max range and min range of output in percentag

- aux_pwm_set_params:
  - op  : 116
  - arg : [id: UInt16, max_range: Double, min_range: Double]
  - ret : null
  - getter_op: 115
  - desc: set max range and min range of output in percentage


  
#---------------------------- AUX ANALOG OUT DAC -----------------------------
- aux_dac_read_value:
  - op  : 118
  - arg : [id: UInt16]
  - ret : [value: Double]
  - desc: read value aux output DAC in scale value from 0 to 1
  
- aux_dac_write_value:
  - op  : 119
  - arg : [id: UInt16, value: Double]
  - ret : null
  - desc: write value aux output DAC in scale value from 0 to 1

#---------------------------- AUX ANALOG IN ADC -----------------------------
- aux_adc_get_params:
  - op  : 123
  - arg : [id: UInt16]  
  - ret : [scale: Double, offset: Double]
  - eeprom: [id: 2]
  - desc: get setting scale and offset for reading the analog in from ADC

- aux_adc_set_params:
  - op  : 124
  - arg : [id: UInt16, scale: Double, offset: Double]
  - ret : null
  - getter_op: 123
  - desc: setting scale and offset for reading the analog in from ADC

- aux_adc_read_value:
  - op  : 125
  - arg : [id: UInt16]
  - ret : [value: Double]
  - desc: read value aux input analog

# ------------------------------- AUX ANALOG IN ADC SENSOR MONITOR ------------------------------------
- sensor_monitor_get_enable_mask:
  - op : 133
  - arg: null
  - ret: [enable_mask: UInt16]
  - eeprom: null
  - desc: |
            get sensor monitor enable mask

- sensor_monitor_set_enable_mask:
  - op : 134
  - arg: [enable_mask: UInt16]
  - ret: null
  - getter_op: 133
  - desc: |
            set sensor monitor enable mask

- sensor_monitor_get_debounce_ms:
  - op : 135
  - arg: null
  - ret: [debounce_ms: UInt16]
  - eeprom: null
  - desc: |
            get sensor monitor debounce time in milisecond
            
- sensor_monitor_set_debounce_ms:
  - op : 136
  - arg: [debounce_ms: UInt16]
  - ret: null
  - getter_op: 135
  - desc: |
            set sensor monitor debounce time in milisecond
            
- sensor_monitor_get_threshold:
  - op : 137
  - arg: [id: UInt16]
  - ret: [upper_limit: Double, lower_limit: Double]
  - eeprom: [id: 1]
  - desc: |
            get sensor monitor upper and lower threshold for corresponding channel

- sensor_monitor_set_threshold:
  - op : 138
  - arg: [id: UInt16, upper_limit: Double, lower_limit: Double]
  - ret: [success : Boolean]
  - getter_op: 137
  - desc: |
            set sensor monitor upper and lower threshold for corresponding channel

#-------------------------------- PUB SUB ----------------------------------------------
- set_subscribe_address:
  - op : 140
  - arg: [value: Int16]
  - ret: null

- get_subscribe_address:
  - op : 141
  - arg: null
  - ret: [value: Int16]

- set_publish_motor_enable:
  - op : 142
  - arg: [id: Int16, enable: Boolean]
  - ret: null

- get_publish_motor_enable:
  - op : 143
  - arg: [id: Int16]
  - ret: [enable: Boolean]

#-------------------------------- SEQUENCER ----------------------------------------------
- queue_nop:
  - op  : 150
  - arg : [id: UInt32, duration_ms: UInt32]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: Add delay time to sequence wihtout operation

- queue_abort:
  - op  : 151
  - arg : [id: UInt32]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: Abort after last sequence executions finished

- queue_move:
  - op  : 152
  - arg : [id: UInt32, duration_ms: UInt32, relative: Boolean, wait_done: Boolean, motor_count: UInt16, motor_id: Array_Int16, pos: Array_Double, vel: Array_Double, acc: Array_Double, jerk: Array_Double]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: move motor sequence
  
- queue_publish_move:
  - op  : 153
  - arg : [id: UInt32, duration_ms: UInt32, relative: Boolean, motor_count: UInt16, motor_id: Array_Int16, pos: Array_Double, vel: Array_Double, acc: Array_Double, jerk: Array_Double]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: publish move motor sequence

- queue_wait_susbcribe:
  - op  : 154
  - arg : [id: UInt32, duration_ms: UInt32]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: for waiting subscribe message go

- queue_publish_go:
  - op  : 155
  - arg : [id: UInt32, duration_ms: UInt32]
  - ret : [remaining_count: Int16, error_code: UInt16]
  - desc: for publish message go

- sequencer_clear:
  - op  : 156
  - arg : null
  - ret : [uncompleted_count: UInt16]
  - desc: Clear all sequencer queue items.

- sequencer_abort:
  - op  : 157
  - arg : null
  - ret : [uncompleted_count: UInt16]
  - desc: Abort after last sequence executions finished

- sequencer_abort_immediately:
  - op  : 158
  - arg : null
  - ret : [uncompleted_count: UInt16]
  - desc: Abort immediately current sequence execution

- sequencer_start:
  - op  : 159
  - arg : null
  - ret : null
  - desc: Start sequencer
  
# ------------------------------- TRINAMIC SPECIFIC ------------------------------------
- write_trinamic_register:
  - op : 170
  - arg: [id: Int16, address: UInt16, value: UInt32]
  - ret: null
  
- read_trinamic_register:
  - op : 171
  - arg: [id: Int16, address: UInt16]
  - ret: [value: UInt32]
  
- set_stallguard_config:
  - op : 172
  - arg: [id: Int16, enable: Boolean, vel_threshold : Double, stall_offset : Int16]
  - ret: null
  - getter_op: 173

- get_stallguard_config:
  - op : 173
  - arg: [id: Int16]
  - ret: [enable: Boolean, vel_threshold : Double, stall_offset : Int16]
  - eeprom: [id: 4]
  
- read_stallguard_result:
  - op : 174
  - arg: [id: Int16]
  - ret: [result : Int16]
  
- set_stealthchop_config:
  - op : 175
  - arg: [id: Int16, enable: Boolean, use_spreadcycle: Boolean, vel_threshold: Double]
  - ret: null
  - getter_op: 176

- get_stealthchop_config:
  - op : 176
  - arg: [id: Int16]
  - ret: [enable: Boolean, use_spreadcycle: Boolean, vel_threshold: Double]
  - eeprom: [id: 4]
  
- set_stealthchop_params:
  - op : 177
  - arg: [id: Int16, pwm_ofs: UInt16, pwm_grad: UInt16]
  - ret: null
  - getter_op: 178

- get_stealthchop_params:
  - op : 178
  - arg: [id: Int16]
  - ret: [pwm_ofs: UInt16, pwm_grad: UInt16]
  - eeprom: [id: 4]
  
- set_auto_pwm_enable:
  - op : 179
  - arg: [id: Int16, enable : Boolean]
  - ret: null
  - getter_op: 180

- get_auto_pwm_enable:
  - op : 180
  - arg: [id: Int16]
  - ret: [enable : Boolean]
  - eeprom: [id: 4]
  
################################### EVENTS #################################################
EVENTS:
- motor_move_started:
  - op  : 512
  - ret: [motor_id: Int16]
  - desc: Fired upon motor movement is started.

- motor_move_done:
  - op  : 513
  - ret: [motor_id: Int16, status: UInt16, position: Double]
  - desc: Fired upon motor movement is done, send the motor status and position. Check MotorStatusBitmask enum for motor status.

- motor_home_done:
  - op  : 514
  - ret: [motor_id: Int16, home_pos: Double, pos: Double]
  - desc: Fired upon motor homing is done, return abs_pos (absolute position), and pos (position after applying offset).

- motor_error_occured:
  - op  : 515
  - ret: [motor_id: Int16, motor_error_code: UInt16]
  - desc: Fired upon motor error is occured. Check MotorErrorCode enum for possible error code.

- on_abs_encoder_average_finish:
  - op  : 516
  - ret: [id: Int16, pos: Double]
  - desc: Fired upon absolute encoder average position finish

- on_input_changed:
  - op  : 801
  - ret: [input_id: UInt16, is_on: UInt16]
  - desc: Fired upon input monitor changed
  
- on_sensor_out_of_bound:
  - op  : 802
  - ret: [id: UInt16, limit_type: UInt16, value: Double]
  - desc: Fired upon sensor monitor out of counds

- on_sequencer_started:
  - op  : 805
  - ret: null
  - desc: Fired when sequencer feature started
  
- on_sequencer_aborted:
  - op  : 806
  - ret: [id: UInt32, uncompleted_count: UInt16]
  - desc: Fired when sequencer feature aborted
  
- on_sequencer_item_run:
  - op  : 807
  - ret: [id: UInt32]
  - desc: Fired when sequence item specified by id begin executes

- on_sequencer_item_finish:
  - op  : 808
  - ret: [id: UInt32]
  - desc: Fired when sequence item specified by id sucessfully executed

- on_sequencer_all_finish:
  - op  : 809
  - ret: null
  - desc: Fired when all sequences item sucessfully executed

- on_sequencer_fault:
  - op  : 810
  - ret: [id: UInt32, uncompleted_count: UInt16]
  - desc: Fired when sequencer fault (motor fault)



