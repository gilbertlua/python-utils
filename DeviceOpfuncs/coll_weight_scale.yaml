APPNAME: 
VERSION: 

COMMANDS:
#---------------------------- INPUT MONITOR ------------------------------------
- save_configuration:
  - op : 3
  - arg: null
  - ret: null
  
- get_debouch_time_ms:
  - op  : 50
  - arg : null
  - ret : [mask: UInt32]
  - desc: get the debouch time in ms

- set_debouch_time_ms:
  - op  : 51
  - arg : [mask: UInt32]
  - ret : null
  - desc: set the debouch time in ms

- get_input_mask:
  - op  : 52
  - arg : null
  - ret : [mask: UInt32]
  - desc: get the input mask please see InputMonitorMask

- set_input_mask:
  - op  : 53
  - arg : [mask: UInt32]
  - ret : null
  - desc: set the input mask please see InputMonitorMask

- read_input_monitor_port_value:
  - op  : 54
  - arg : null
  - ret : [mask: UInt32]
  - desc: read the IO port (all bits)

  # ------------------------------- MOTION ABORT ------------------------------------
- get_abort_config:
  - op  : 90
  - arg : [abort_id: Int16]
  - ret : [trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - desc: please see AbortInputBitmask and AbortId

- set_abort_config:
  - op : 91
  - arg: [abort_id: Int16, trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - ret: null
  - desc: please see AbortInputBitmask and AbortId

- clear_triggered_inputs:
  - op : 92
  - arg: [abort_id: Int16]
  - ret: null

- get_triggered_inputs:
  - op : 93
  - arg: [abort_id: Int16]
  - ret: [input_mask: UInt32]

- get_triggered_positions:
  - op : 94
  - arg: [abort_id: Int16, first_input: Int16, count: Int16]
  - ret: [data: Array_Double_c]
  
#---------------------------- Auxs ---------------------------------------------
- get_aux_analog_in_params:
  - op  : 60
  - arg : [id: UInt16]  
  - ret : [scale: Double, offset: Double]
  - desc: get setting scale and offset for reading the analog in from ADC

- set_aux_analog_in_params:
  - op  : 61
  - arg : [id: UInt16, scale: Double, offset: Double]
  - ret : null
  - desc: setting scale and offset for reading the analog in from ADC

- read_aux_analog_in_value:
  - op  : 62
  - arg : [id: UInt16]
  - ret : [value: Double]
  - desc: read value aux input analog

- get_aux_analog_out_params:
  - op  : 63
  - arg : [id: UInt16]
  - ret : [max_range: Double, min_range: Double]
  - desc: get max range and min range of output in percentag

- set_aux_analog_out_params:
  - op  : 64
  - arg : [id: UInt16, max_range: Double, min_range: Double]
  - ret : null
  - desc: set max range and min range of output in percentage

- get_aux_analog_out_value:
  - op  : 65
  - arg : [id: UInt16]
  - ret : [value: Double]
  - desc: get value in percentage from range

- set_aux_analog_out_value:
  - op  : 66
  - arg : [id: UInt16, value: Double]
  - ret : null
  - desc: set value in percentage from range

- get_aux_analog_out_pwm_freq:
  - op  : 67
  - arg : null
  - ret : [value: UInt32]
  - desc: get freq analog out pwm in Hz

- set_aux_analog_out_pwm_freq:
  - op  : 68
  - arg : [value: UInt32]
  - ret : null
  - desc: set freq analog out pwm in Hz

# ---------------------------------- VALVE ----------------------------------------
- open_valve:
  - op  : 70
  - arg : [valve_id: UInt16]
  - ret : null
  - desc: |
          Open a valve. NOTE that the electronic is designed such that only 1 valve can be opened at a time.
          It means, opening 1 valve will automatically close remaining valves.

- close_all_valve:
  - op  : 71
  - arg : null
  - ret : null
  - desc: Close all valve. There is not any single valve closing, due to limitation explained in open_valve opcode.

- get_valve_opening:
  - op  : 72
  - arg : [valve_id: UInt16]
  - ret : [isopen: Boolean]
  - desc: Get opening status of a valve.

- get_all_valve_opening:
  - op  : 73
  - arg : null
  - ret : [isopen_mask: UInt16]
  - desc: Get opening status of all valves. Opening status is represented as bitmask, bit 0 is valve 0, bit 1 is valve 1, so on.

- get_valve_config:
  - op  : 74
  - arg : null
  - ret : [pulse_time_us: UInt32, pulse_duty: Double, hold_duty: Double, activelow_decoder_mask: UInt16]
  - desc: |
          Get all valve config. Since one pulser is shared by all valve, this config represent all valve.
          - pulse_time_us -> valve pulsing timing
          - pulse_duty    -> duty cycle of pulser when valves are pulsing in percent (0 - 100)
          - hold_duty     -> duty cycle of pulser when valves are holding in percent (0 - 100)
          - activelow_decoder_mask -> mask to set whether decoder pin is active LOW or active HIGH
                                      Set bit to 1 to set the pin as active LOW. bit 0 is pin 0, bit 1 is pin 1, and so on. 

- set_valve_config:
  - op  : 75
  - arg : [pulse_time_us: UInt32, pulse_duty: Double, hold_duty: Double, activelow_decoder_mask: UInt16]
  - ret : null
  - desc: Set all valve config. Please check get_valve_config opcode for arguments explanation.

# ------------------------------- Timed Output ------------------------------------
- timed_output_perform_set_clear:
  - op  : 84
  - arg : [id: UInt16, duration_ms: UInt32]
  - ret : [success: Boolean]
  - desc: Add set operation on output, followed with clear operation after duration timeouts

- timed_output_perform_clear_set:
  - op  : 85
  - arg : [id: UInt16, duration_ms: UInt32]
  - ret : [success: Boolean]
  - desc: Add set operation on output, followed with clear operation after duration timeouts

- timed_output_abort:
  - op  : 86
  - arg : [id: UInt16]
  - ret : [success: Boolean]
  - desc: Abort current action on timed output with specified bit


# ------------------------------- MOTION ABORT ------------------------------------
# *Note : currently only one motion abort driver, door interlock, is used
- get_abort_config:
  - op  : 90
  - arg : [abort_id: Int16]
  - ret : [trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - desc: please see AbortInputBitmask and AbortId

- set_abort_config:
  - op : 91
  - arg: [abort_id: Int16, trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - ret: null
  - desc: please see AbortInputBitmask and AbortId

- clear_triggered_inputs:
  - op : 92
  - arg: [abort_id: Int16]
  - ret: null

- get_triggered_inputs:
  - op : 93
  - arg: [abort_id: Int16]
  - ret: [input_mask: UInt32]

- set_abort_threshold:
  - op : 97
  - arg: [abort_id: Int16, threshold: Double]
  - ret: [success: Boolean]
 
- get_abort_threshold:
  - op : 96
  - arg: [abort_id: Int16]
  - ret: [threshold: Double]
 
- set_address:
  - op : 100
  - arg: [new_addr: Int16]
  - ret: null
  

# ------------------------------- SENSOR MONITOR ------------------------------------
- sensor_monitor_get_enable_mask:
  - op : 41
  - arg: null
  - ret: [enable_mask: UInt16]
  - desc: |
            get sensor monitor enable mask

- sensor_monitor_set_enable_mask:
  - op : 42
  - arg: [enable_mask: UInt16]
  - ret: null
  - desc: |
            set sensor monitor enable mask

- sensor_monitor_get_debounce_ms:
  - op : 43
  - arg: null
  - ret: [debounce_ms: UInt16]
  - desc: |
            get sensor monitor debounce time in milisecond
            
- sensor_monitor_set_debounce_ms:
  - op : 44
  - arg: [debounce_ms: UInt16]
  - ret: null
  - desc: |
            set sensor monitor debounce time in milisecond
            
- sensor_monitor_get_threshold:
  - op : 45
  - arg: [id: UInt16]
  - ret: [upper_limit: Double, lower_limit: Double]
  - desc: |
            get sensor monitor upper and lower threshold for corresponding channel

- sensor_monitor_set_threshold:
  - op : 46
  - arg: [id: UInt16, upper_limit: Double, lower_limit: Double]
  - ret: [success : Boolean]
  - desc: |
            set sensor monitor upper and lower threshold for corresponding channel
# ------------------------------- Weight Scale ------------------------------------
- get_tick:
  - op : 10
  - arg: null
  - ret: [time_milis : UInt32]
  - desc: |
            get the current time in millisecond on micro controller

- read_weight:
  - op : 12
  - arg: [id: UInt16]
  - ret: [status : Boolean, weight : Double,timestamp : UInt32]
  - desc: |
            status : if the load cell reading disabled, it will return false
            and the data is not valid
            weight : weight data that processed by moving average
            timestamp : is the time in millisecond that show when the
            data sampling happen.
- tare:
  - op : 14
  - arg: [id: UInt16, avgWindow: UInt16]
  - ret: [status: Boolean]
  - desc: |
            If the return value is false it means there is ongoing
            tare/calibration process, you need to wait it until its done.

- calibrate:
  - op : 15
  - arg: [id: UInt16, refWeight: Double, avgWindow: UInt16]
  - ret: [status: Boolean]
  - desc: |
            before calibrating the scale, you must tare the scale first.
            if the calibration process done, event will be sent with the
            calibration (scale) value.
            If the return value is false it means there is ongoing
            tare/calibration process, you need to wait it until its done.
            Need to call save configuration to save its scale value

- set_scale:
  - op : 17
  - arg: [id: UInt16, scale: Double]
  - ret: null
  - desc: |
            We can set the scale manually without calibration process,
            set it to one to get raw ADC data

- get_scale:
  - op : 18
  - arg: [id: UInt16]
  - ret: [scale: Double]
  - desc: |
            Get current scale value

- set_avg_window:
  - op : 24
  - arg: [id: UInt16, avg_window: UInt16]
  - ret: [stat : Boolean]

- get_avg_window:
  - op : 25
  - arg: [id: UInt16]
  - ret: [avg_window: UInt16]

- set_load_cell_enable:
  - op : 26
  - arg: [id: UInt16, enable: Boolean]
  - ret: [stat : Boolean]

- get_load_cell_enable:
  - op : 27
  - arg: [id: UInt16]
  - ret: [stat : Boolean]

- set_offset:
  - op : 28
  - arg: [id: UInt16, offset: Int32]
  - ret: null
  - desc: |

- get_offset:
  - op : 29
  - arg: [id: UInt16]
  - ret: [offset: Int32]
  - desc: |
            Get current offset

- set_high_sampling_rate:
  - op : 30
  - arg: [isHigh: Boolean]
  - ret: null
  - desc: |
            Set High Rate Sampling if true 80Hz, if false 10Hz

- get_high_sampling_rate:
  - op : 31
  - arg: null
  - ret: [isHigh: Boolean]
  - desc: |
            Set High Rate Sampling if true 80Hz, if false 10Hz

  ################################### EVENTS #################################################
EVENTS:
- on_input_changed:
  - op  : 801
  - ret: [input_id: UInt16, is_on: UInt16]
  - desc: Fired upon input monitor changed
  
- on_sensor_out_of_bound:
  - op  : 802
  - ret: [id: UInt16, limit_type: UInt16, value: Double]
  - desc: Fired upon sensor monitor out of counds

- on_tare_done:
  - op  : 803
  - ret: [id: UInt16, offset: Int32 ]
  - desc: Fired when tare scale done

- on_calibrate_done:
  - op  : 804
  - ret: [id: UInt16, scale: Double]
  - desc: Fired when tare scale done

- on_timed_output_action_start:
  - op  : 810
  - ret: [id: UInt16, is_on: Boolean]
  - desc: Fired when timed output with specified id and bit has started

- on_timed_output_action_finish:
  - op  : 811
  - ret: [id: UInt16, is_on: Boolean]
  - desc: Fired when timed output with specified id and bit has finished
