APPNAME: ModularMotion
VERSION: 1.0.2

################################### ENUMS & BITMASKS #################################################-
ENUMS:
- MotorErrorCode:
  - desc : Motor error code
  - type : UInt16
  - value:
    - mecodeNone : [0, No Error]
    - mecodeInvalidID : [1, Invalid Motor ID]
    - mecodeLowerLimit : [2, Motor hit Lower Limit switch]
    - mecodeUpperLimit : [3, Motor hit Upper Limit switch]
    - mecodeIllegalPos : [4, Illegal Position]
    - mecodeIllegalVel : [5, Illegal Velocity]
    - mecodeIllegalAcc : [6, Illegal Acceleration]
    - mecodeAborted : [7, Motor Stopped by Motion Abort]
    - mecodeFolErrorIdle : [8, Encoder doesn't match Motor position while Idle]
    - mecodeFolErrorMoving : [9, Encoder doesn't match Motor position while Moving]
    - mecodeEncoderError : [10, Encoder error]
    - mecodeDisabled : [11, Motor is disabled]
    - mecodeHoming : [12, Motor is homing]
    - mecodeEmergencyStop : [13, Emergency Stop is activated]
    - mecodeHardBrake : [14, Hard Brake is activated]
    - mecodeDriverFault : [15, Motor driver fault signal is triggered]
    - mecNoMove : [16, Motor move to the same position]
    - mecMoveNotSupported : [17, some movement can't b overidden ( s-curve)]
    - mecIllegalJrk : [18, illegal jerk (s-curve)]
    - mecStalled : [19, motor stalled detected using trinamic stallguard]

- MotorStatusBitmask:
  - desc : Bitmask for motor status code (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - msbitMoving : [1, Motor is moving]
    - msbitHoming : [2, Motor is homing]
    - msbitHomed : [4, Motor is already homed]
    - msbitLowerLimit : [8, LowerLimit switch is hit]
    - msbitUpperLimit : [16, UpperLimit switch is hit]
    - msbitOverCurrent : [32, Motor overcurrent]
    - msbitAborted : [64, Motor motion abort is triggered]
    - msbitFolErrorIdle : [128, Following Error while motor is idle]
    - msbitFolErrorMoving : [256, Following Error while motor is moving]
    - msbitEncoderError : [512, Encode Error]
    - msbitDisabled : [1024, Motor is Disabled]
    - msbitEmergencyStop : [2048, Emergency Stop is triggered]
    - msbitHardBrake : [4096, HardBrake is triggered]
    - msbitDriverFault : [8192, Motor driver fault signal is triggered]

- MotorInputBitmask:
  - desc : Bitmask for motor input code (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - mibitHomeSwitch : [1, motor homing switch]
    - mibitLowerLimit : [2, motor lower limit switch]
    - mibitUpperLimit : [4, motor upper limit switch]
    - mibitEnableSwitch : [8, motor enable switch]
    - mibitAbortFlag : [16, motor abort flag]
    - mibitDriverFault : [32, motor driver fault signal]

- LoggerTickBitmask:
  - desc : Bitmask for activation of logger tick (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - logbitIndexActive : [1, Activate logging index]

- LoggerMotorBitmask:
  - desc : Bitmask for activation of motor data logging (e.g. value 1 is bit 0, value 2 is bit 1, etc)
  - type : UInt16
  - value:
    - logbitAdcMotorCurrentA : [1, Raw ADC value of Motor Coil A Current sensor reading (Current = ADCvalue * CurrsensorScale + CurrsensorOffset)]
    - logbitAdcMotorCurrentB : [2, Raw ADC value of Motor Coil B Current sensor reading (Current = ADCvalue * CurrsensorScale + CurrsensorOffset)]
    - logbitMotorCurrentError : [4, PID Current Error (Ampere * 1e4 + 32768)]
    - logbitMotorCurrentSetpoint : [8, PID Current Setpoint (Ampere * 1e4 + 32768)]
    - logbitMotorControlOut : [16, Motor PID total Control output]
    - logbitMotorPwmA : [32, PWM of Motor Coil A]
    - logbitMotorPwmB : [64, PWM of Motor Coil B]
    - logbitMotorVelocity : [128, Velocity of Motor (Velocity * 10  + 32768)]

# - AbortInputBitmask:
  # - desc : Bitmask for activating input of motion abort
  # - type : UInt32
  # - Value:
    # - Motor0Fault : [1, motor 0 fault active high]
    # - Motor1Fault : [2, motor 1 fault active high]
    # - Estop : [4, Estop Signal active low]
    # - TouchOff : [8, Touch off Signal active low]
    # - DoorOpen : [16, Door Open signal active low]
    # - TrashBin : [32, Trash Bin signal active low]
    # - DoorClosed : [64, Door Open signal active low]

# - AbortId:
  # - desc : Id for abort object
  # - type : Int16
  # - Value:
    # - Motor0 : [0, motor 0 it will stop motor with deceleration if aborted]
    # - Motor1 : [1, motor 1 it will stop motor with deceleration if aborted]
    # - Estop : [2, Estop it will give low signal to bus if aborted]
    # - TouchOff : [3, Touch off it will give low signal to bus if aborted]

# - InputMonitorMask:
  # - desc : Bitmask for activating input monitor also value for read input
  # - type : UInt32
  # - Value:
    # - Estop : [1, Estop Signal active low]
    # - TouchOff : [2, Touch off Signal active low]
    # - DoorOpen : [4, Door Open signal active low]
    # - TrashBin : [8, Trash Bin signal active low]
    # - DoorClosed : [16, Door Open signal active low]


COMMANDS:  
#---------------------------- GENERAL ------------------------------------
- save_configuration:
  - op  : 3
  - arg : null
  - ret : null
  - desc: Save configuration to EEPROM

- hang_firmware:
  - op  : 8
  - arg : null
  - ret : null
  - desc: hang device
  
- reset:
  - op  : 9
  - arg : null
  - ret : null
  - desc: reset device
 

#---------------------------------------- MOTOR ------------------------------------
- get_motor_limits:
  - op  : 10
  - arg : [motor_id: Int16]
  - ret : [min_limit: Double, max_limit: Double]
  - desc: Get motor position limits

- set_motor_limits:
  - op  : 11
  - arg : [motor_id: Int16, min_limit: Double, max_limit: Double]
  - ret : null
  - desc: Set motor position limits (e.g. min -4000 max 4000)  

- get_motor_currents:
  - op  : 12
  - arg : [motor_id: Int16]
  - ret : [boost: Double, travel: Double, hold: Double]
  - desc: Get motor current (Ampere) setting. Boost is acceleration current, travel is moving current, hold is holding current

- set_motor_currents:
  - op  : 13
  - arg : [motor_id: Int16, boost: Double, travel: Double, hold: Double]
  - ret : null
  - desc: Set motor current (Ampere). Boost is acceleration current, travel is moving current, hold is holding current

- get_motor_config:
  - op  : 14
  - arg : [motor_id: Int16]
  - ret : [invert_dir: Boolean, kp: Double, ki: Double, kd: Double, num_usteps: Int16]
  - desc: Get motor config. Invert_dir is motor direction inversion flag. Kp, Ki, Kd is PID gain. Currently, Kd and num_usteps cannot be changed.

- set_motor_config:
  - op  : 15
  - arg : [motor_id: Int16, invert_dir: Boolean, kp: Double, ki: Double, kd: Double, num_usteps: Int16]
  - ret : null
  - desc: Set motor config. Invert_dir is motor direction inversion flag. Kp, Ki, Kd is PID gain. num_usteps is number of substep for each step.

- read_motor_inputs:
  - op  : 16
  - arg : [motor_id: Int16]
  - ret : [motor_inputs: Int16]
  - desc: Read various motor inputs, collected as bitmasks (1 is Active). Check MotorInputBitmask for the bitmask details.

- clear_motor_fault:
  - op  : 17
  - arg : [motor_id: Int16]
  - ret : null
  - desc: Clear motor faults. You should send this before moving motor, every time motor failure occurs.

- get_motor_open_loop:
  - op  : 18
  - arg : [motor_id: Int16]
  - ret : [is_open_loop: Boolean]
  - desc: Returns false if motor is not in open loop control mode, true otherwise.

- set_motor_open_loop:
  - op  : 19
  - arg : [motor_id: Int16, is_open_loop: Boolean]
  - ret : null
  - desc: Set use_openloop to True, to activate open loop control mode. is_error will be True if motor mode cannot be set (e.g. while still moving).

- get_motor_status:
  - op  : 20
  - arg : [motor_id: Int16]
  - ret : [motor_status: UInt16]
  - desc: Get motor status. Check MotorStatusBitmask under ENUMS section.

- home_motor:
  - op  : 21
  - arg : [motor_id: Int16, flag: UInt16, pos_edge: Boolean, pos_dir: Boolean, slow_vel: Double, fast_vel: Double, accel: Double, jerk: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Home motor. Automatically set motor position to 0 upon finished. Delidder used home switch only for homing
          Arguments
          - flag     -> Always set this to 0 for now. 
          - pos_edge -> False to detect falling edge homing sensor signal, True to detect rising edge
          - pos_dir  -> Movement direction, set False to reverse.
          - slow_vel -> Initial velocity before home switch is activated.
          - fast_vel -> Velocity after home switch is activated (finding precise home location).
          - accel    -> Motor motion acceleration.
          - jerk     -> Motor jerk.

          Returns
          - motor_error -> Check MotorErrorCode in ENUMS section


- move_motor_abs:
  - op  : 22
  - arg : [motor_id: Int16, pos: Double, vel: Double, acc: Double, jrk: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Move motor to an absolute position
          Arguments
          - pos -> Target position, should be within position limit
          - vel -> Motor Velocity
          - acc -> Motor Acceleration
          - jrk     -> Motor Jerk (optional, depends on profile type)

          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- move_motor_vel:
  - op  : 23
  - arg : [motor_id: Int16, forward: Boolean, vel: Double, accel: Double, jrk: Double]
  - ret : [motor_error_code: UInt16]
  - desc: |
          Move motor with certain velocity, stopped when position limit is reached.
          Arguments
          - forward -> Set to False to inverse direction.
          - vel     -> Motor velocity
          - acc     -> Motor Acceleration
          - jrk     -> Motor Jerk (optional, depends on profile type)

          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- stop_motor:
  - op  : 24
  - arg : [motor_id: Int16, accel: Double, jrk: Double]
  - ret : [motor_error_code: UInt16]
  - desc: Stop motor, even if its moving, with inputed acceleration set in accel. Return MotorErrorCode enum.

- abort_motor:
  - op : 25
  - arg : [motor_id: Int16]
  - ret : [motor_error_code: UInt16]
  - desc: Stop motor with predetermined acceleration (56000). Return MotorErrorCode enum.

- get_motor_pos:
  - op  : 27
  - arg : [motor_id: Int16]
  - ret : [curr_pos: Double, curr_vel: Double, curr_acc: Double]
  - desc: Get current motor position.

- set_motor_pos:
  - op  : 28
  - arg : [motor_id: Int16, pos: Double]
  - ret : null
  - desc: Manually set current motor position.

# Not implemented in trinamic
#- set_motor_duty:
#  - op  : 29
#  - arg : [motor_id: Int16]
#  - ret : [curr_pos: Double, curr_vel: Double, curr_acc: Double]
#  - desc: Get current motor position.

- get_motor_lower_limit_enable:
  - op  : 30
  - arg : [motor_id: Int16]
  - ret : [enable: Boolean]
  - desc: Get enable motor lower limit.

- set_motor_lower_limit_enable:
  - op  : 31
  - arg : [motor_id: Int16, enable: Boolean]
  - ret : null
  - desc: Set enable motor lower limit.

- get_motor_upper_limit_enable:
  - op  : 32
  - arg : [motor_id: Int16]
  - ret : [enable: Boolean]
  - desc: Get enable motor upper limit.

- set_motor_upper_limit_enable:
  - op  : 33
  - arg : [motor_id: Int16, enable : Boolean]
  - ret : null
  - desc: Set enable motor upper limit.

- set_motor_enable:
  - op  : 47
  - arg : [motor_id: Int16, enable: Boolean]
  - ret : null
  - desc: Manually set enable motor .

- get_motor_stop_decel:
  - op  : 48
  - arg : [motor_id: Int16]
  - ret : [stop: Double, abort: Double, jerk: Double]
  - desc: get motor stop decel 

- set_motor_stop_decel:
  - op  : 49
  - arg : [motor_id: Int16, stop: Double, abort: Double, jerk: Double]
  - ret : null
  - desc: Set Motor stop decel .

- get_motor_enable:
  - op  : 136
  - arg : [motor_id: Int16]
  - ret : [is_enable: Boolean]
  - desc: get enable motor status

  
#---------------------------- INPUT MONITOR ------------------------------------
- get_debouch_time_ms:
  - op  : 50
  - arg : [id: UInt16]
  - ret : [mask: UInt32]
  - desc: get the debouch time in ms

- set_debouch_time_ms:
  - op  : 51
  - arg : [id: UInt16, mask: UInt32]
  - ret : null
  - desc: set the debouch time in ms

- get_input_mask:
  - op  : 52
  - arg : null
  - ret : [mask: UInt32]
  - desc: get the input mask please see InputMonitorMask

- set_input_mask:
  - op  : 53
  - arg : [mask: UInt32]
  - ret : null
  - desc: set the input mask please see InputMonitorMask

- read_input_monitor_port_value:
  - op  : 54
  - arg : null
  - ret : [mask: UInt32]
  - desc: read the IO port (all bits)


#---------------------------- Auxs ---------------------------------------------
- get_aux_analog_in_params:
  - op  : 60
  - arg : [id: UInt16]
  - ret : [scale: Double, offset: Double]
  - desc: get setting scale and offset for reading the analog in from ADC

- set_aux_analog_in_params:
  - op  : 61
  - arg : [id: UInt16, scale: Double, offset: Double]
  - ret : null
  - desc: setting scale and offset for reading the analog in from ADC

- read_aux_analog_in_value:
  - op  : 62
  - arg : [id: UInt16]
  - ret : [value: Double]
  - desc: read value aux input analog

- get_aux_analog_out_params:
  - op  : 63
  - arg : [id: UInt16]
  - ret : [max_range: Double, min_range: Double]
  - desc: get max range and min range of output in percentage

- set_aux_analog_out_params:
  - op  : 64
  - arg : [id: UInt16, max_range: Double, min_range: Double]
  - ret : null
  - desc: set max range and min range of output in percentage

- get_aux_analog_out_value:
  - op  : 65
  - arg : [id: UInt16]
  - ret : [value: Double]
  - desc: get value in percentage from range

- set_aux_analog_out_value:
  - op  : 66
  - arg : [id: UInt16, value: Double]
  - ret : null
  - desc: set value in percentage from range

- get_aux_analog_out_pwm_frequency:
  - op  : 67
  - arg : [id: UInt16]
  - ret : [value: UInt32]
  - desc: get freq analog out pwm hz

- set_aux_analog_out_pwm_frequency:
  - op  : 68
  - arg : [id: UInt16, value: UInt32]
  - ret : null
  - desc: set freq analog out pwm in Hz

#------------------------------ AS5047 Absolute encoder ---------------------------------
- get_abs_encoder_position:
  - op  : 70
  - arg : [id: Int16]
  - ret : [position: Double]
  - desc: get abs encoder position step

- get_abs_encoder_config:
  - op  : 71
  - arg : [id: Int16]
  - ret : [inverted: Boolean, count_per_rev: UInt16, motor_step_per_rev: UInt16]
  - desc: Get Absolute encoder inversion status (True if inverted) 

- set_abs_encoder_config:
  - op  : 72
  - arg : [id: Int16, inverted: Boolean, count_per_rev: UInt16, motor_step_per_rev: UInt16]
  - ret : null
  - desc: Set encoder inversion status (True if inverted) 

- start_abs_encoder_average_pos:
  - op  : 73
  - arg : [id: Int16, window: UInt16]
  - ret : [success: Boolean]
  - desc: Start averaging on absolute encoder, the output is on event average finish

- read_AS5047_register:
  - op  : 74
  - arg : [id: Int16, address: UInt16]
  - ret : [success: Boolean, value: UInt16]
  - desc: Read AS5047 absolute encoder regiter value at certain address

- write_AS5047_register:
  - op  : 75
  - arg : [id: Int16, address: UInt16, value: UInt16]
  - ret : [success: Boolean]
  - desc: Read AS5047 absolute encoder regiter value at certain address
            

# -------------------------- ENCODER ------------------------------------
- get_encoder_config:
  - op  : 80
  - arg : [motor_id: Int16]
  - ret : [inverted: Boolean, count_per_step: Double]
  - desc: Get encoder inversion status (True if inverted) and encoder count per step.

- set_encoder_config:
  - op  : 81
  - arg : [motor_id: Int16, inverted: Boolean, count_per_step: Double]
  - ret : null
  - desc: Set encoder inversion status (True if inverted) and encoder count per step.

- get_fol_error_config:
  - op  : 82
  - arg : [motor_id: Int16]
  - ret : [is_tracking_enabled: Boolean, max_fol_error: Double]
  - desc: |
          Get following error (encoder count != motor position) config
          Returns
          - is_tracking_enabled -> True if following error is enabled
          - max_fol_error     -> Encoder count and motor position difference threshold that trigger the error.

- set_fol_error_config:
  - op  : 83
  - arg : [motor_id: Int16, is_tracking_enabled: Boolean, max_fol_error: Double]
  - ret : null
  - desc: |
          Set following error (encoder count != motor position) config
          Returns
          - is_tracking_enabled -> set to True to enable following error
          - max_fol_error     -> Encoder count and motor position difference threshold that trigger the error.

- get_encoder_position:
  - op  : 84
  - arg : [motor_id: Int16]
  - ret : [position: Double]
  - desc: get encoder position/counts
  
- get_encoder_correction_enable:
  - op : 86
  - arg : [id: Int16]
  - ret : [error_code: Int16, enable: Boolean]
  - desc: |
          Get encoder correction enable
          - id -> motor id
          - enable -> enable the encoder correction
          - error_code -> success if 0

- set_encoder_correction_enable:
  - op : 87
  - arg : [id: Int16, enable: Boolean]
  - ret : [error_code: Int16]
  - desc: |
          Get encoder correction enable
          - id -> motor id
          - enable -> enable the encoder correction
          - error_code -> success if 0

- get_encoder_correction_config:
  - op : 88
  - arg : [id: Int16]
  - ret : [error_code: Int16, ECp: Double, ECi: Double, ECd: Double, max_step_rate: Double, dead_band: Double, EC_integral_limit: Double]
  - desc: |
          Get encoder correction config
          - id -> motor id
          - ECp -> error correction proportional value
          - max_step_rate -> maximum correction step / second
          - error_code -> success if 0

- set_encoder_correction_config:
  - op : 89
  - arg : [id: Int16, ECp: Double, ECi: Double, ECd: Double, max_step_rate: Double, dead_band: Double, EC_integral_limit: Double]
  - ret : [error_code: Int16]
  - desc: |
          Set encoder correction config
          - id -> motor id
          - ECp -> error correction proportional value
          - max_step_rate -> maximum correction step / second
          - error_code -> success if 0

# ------------------------------- MOTION ABORT ------------------------------------
- get_abort_config:
  - op  : 90
  - arg : [abort_id: Int16]
  - ret : [trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - desc: please see AbortInputBitmask and AbortId

- set_abort_config:
  - op : 91
  - arg: [abort_id: Int16, trigger_on_all: Boolean, enable_mask: UInt32, active_low_mask: UInt32]
  - ret: null
  - desc: please see AbortInputBitmask and AbortId

- clear_triggered_inputs:
  - op : 92
  - arg: [abort_id: Int16]
  - ret: null

- get_triggered_inputs:
  - op : 93
  - arg: [abort_id: Int16]
  - ret: [input_mask: UInt32]

- get_triggered_positions:
  - op : 94
  - arg: [abort_id: Int16, first_input: Int16, count: Int16]
  - ret: [data: Array_Double_c]

- get_triggered_value:
  - op : 95
  - arg: [abort_id: Int16, first_input: Int16, count: Int16]
  - ret: [data: Array_Double_c] 

- get_abort_threshold:
  - op : 96
  - arg: [abort_id: Int16]
  - ret: [threshold: Double]

- set_abort_threshold:
  - op : 97
  - arg: [abort_id: Int16, threshold: Double]
  - ret: null
#- set_abs_encoder_enable
#- get_abs_encoder_enable


#---------------------------------- MISC ---------------------------------------
#'''
#- set_address:
#  - op  : 100
#  - arg : [addr : Int16]
#  - ret : null
#  - desc: Set device address
#  
#- get_packet_error_count:
#  - op  : 101
#  - arg : null
#  - ret : [count : Int16]
#  - desc: Set device address  
#
#- set_single_precision_enable:
#  - op  : 102
#  - arg : [enable : Boolean]
#  - ret : null
#  - desc: Set single precision ( float ) data enable or use Float precision instead ( Float ) 
#
#- get_single_precision_enable:
#  - op  : 103
#  - arg : null
#  - ret : [enable : Boolean]
#  - desc: get single precision ( float ) data enable or use Float precision instead ( Float ) 
#'''

# ------------------------------- SENSOR MONITOR ------------------------------------
- get_sensor_monitor_enable_mask:
  - op : 110
  - arg: null
  - ret: [enable_mask: UInt16]
  - desc: |
            get sensor monitor enable mask

- set_sensor_monitor_enable_mask:
  - op : 111
  - arg: [enable_mask: UInt16]
  - ret: null
  - desc: |
            set sensor monitor enable mask

- get_sensor_monitor_debounce_ms:
  - op : 112
  - arg: [id: UInt16]
  - ret: [debounce_ms: UInt32]
  - desc: |
            get sensor monitor debounce time in milisecond
            
- set_sensor_monitor_debounce_ms:
  - op : 113
  - arg: [id: UInt16, debounce_ms: UInt32]
  - ret: null
  - desc: |
            set sensor monitor debounce time in milisecond
            
- get_sensor_monitor_threshold:
  - op : 114
  - arg: [id: UInt16]
  - ret: [upper_limit: Double, lower_limit: Double]
  - desc: |
            get sensor monitor upper and lower threshold for corresponding channel

- set_sensor_monitor_threshold:
  - op : 115
  - arg: [id: UInt16, upper_limit: Double, lower_limit: Double]
  - ret: [success : Boolean]
  - desc: |
            set sensor monitor upper and lower threshold for corresponding channel



#---------------------------------- MOTOR BRAKE -----------------------------------
- get_motor_brake_params:
  - op : 120
  - arg: [id: Int16]
  - ret: [brake_on_fault : Boolean, inverted : Boolean, pulse_period_us: UInt32, pulse_voltage: Double, hold_voltage: Double, supply_voltage: Double]
  - desc: |
            get solenoid motor brake params

- set_motor_brake_params:
  - op : 121
  - arg: [id: Int16, brake_on_fault : Boolean, inverted : Boolean , pulse_period_us: UInt32, pulse_voltage: Double, hold_voltage: Double, supply_voltage: Double]
  - ret: null
  - desc: |
            set solenoid motor brake params

- get_motor_brake_pwm_period_us:
  - op : 122
  - arg: null
  - ret: [pwm_period_us: UInt32]
  - desc: |
            get motor brake PWM period in Us

- set_motor_brake_pwm_period_us:
  - op : 123
  - arg: [pwm_period_us: UInt32]
  - ret: null
  - desc: |
            set motor brake PWM period in Us, the freq will affect after FW reboot

- set_motor_brake_enable:
  - op : 124
  - arg: [id: UInt16, enable: Boolean]
  - ret: null
  - desc: |
            switch functionality between motor brake or aux pwm

- get_motor_brake_enable:
  - op : 125
  - arg: [id: UInt16]
  - ret: [enable: Boolean]
  - desc: |
            get functionality between motor brake or aux pwm


#---------------------------------- MOTOR EXTENSION -----------------------------------
- get_profile_list:
  - op  : 130
  - arg : [motor_id: Int16]
  - ret : [count: Int16, data: Array_Int16_c]
  - desc: Obtain list of available motion profile types

- get_active_profile:
  - op  : 131
  - arg : [motor_id: Int16]
  - ret : [profile_type: Int16]
  - desc: Get the currently active profile
  
- set_active_profile:
  - op  : 132
  - arg : [motor_id: Int16, profile_type: Int16]
  - ret : [ret_code: Int16]
  - desc: Set active profile, returns 0 if success

- move_multi_motor_abs:
  - op  : 133
  - arg : [motor_count: UInt16, motor_id: Array_Int16, pos: Array_Double, vel: Array_Double, acc: Array_Double]
  - ret : [motor_error_code: Array_UInt16]
  - desc: |
          Move motor to an absolute position
          Arguments
          - pos -> Target position, should be within position limit
          - vel -> Motor Velocity
          - acc -> Motor Acceleration
          
          Returns
          - motor_error_code -> Check MotorErrorCode in ENUMS section

- get_motor_enabled:
  - op  : 136
  - arg : [id: UInt16]
  - ret : [isEnabled: Boolean]
  - desc: get motor enabled
   

# --------------------------------- CONTROLLER ---------------------------------
- set_controller_setting:
  - op : 240
  - arg: [id : UInt16, source_index : UInt16, drain_index : UInt16, input_index : UInt16, type : UInt16]
  - ret: null
  - desc: Set controller setting 

- get_controller_setting:
  - op : 241
  - arg: [id : UInt16]
  - ret: [source_index : UInt16, drain_index : UInt16, input_index : UInt16, type : UInt16]
  - desc: Get COntroller setting

- set_controller_enable:
  - op : 242
  - arg: [id : UInt16, enable : Boolean]
  - ret: null
  - desc: Set controller enable status

- get_controller_enable:
  - op : 243
  - arg: [id : UInt16]
  - ret: [enable : Boolean]
  - desc: Get controller enable status 

- set_controller_enable_on_start:
  - op : 244
  - arg: [id : UInt16, enable : Boolean]
  - ret: null
  - desc: Set controller enable run on start

- get_controller_enable_on_start:
  - op : 245
  - arg: [id : UInt16]
  - ret: [enable : Boolean]
  - desc: Get controller enable run on start

- set_controller_period:
  - op : 246
  - arg: [id : UInt16, period_us : UInt32]
  - ret: null
  - desc: Set controller period

- get_controller_period:
  - op : 247
  - arg: [id : UInt16]
  - ret: [period_us : UInt32]
  - desc: Get controller period 

- set_pid_setpoint:
  - op  : 248
  - arg : [id : UInt16, setpoint: Double]
  - ret : null
  - desc: Set control pid setpoint

- get_pid_setpoint:
  - op  : 249
  - arg : [id : UInt16]
  - ret : [setpoint: Double]
  - desc: Get  control pid setpoint

- set_pid_coeff:
  - op  : 250
  - arg : [id : UInt16, p: Double, i: Double, d: Double, iLimH: Double, iLimL: Double]
  - ret : null
  - desc: Set temperature control pid gains

- get_pid_coeff:
  - op  : 251
  - arg : [id : UInt16]
  - ret : [p: Double, i: Double, d: Double, iLimH: Double, iLimL: Double]
  - desc: Get temperature control pid gains

- set_pid_deadband:
  - op  : 252
  - arg : [id : UInt16, lower: Double, upper: Double]
  - ret : null
  - desc: Set temperature control pid deadband in Celcius relative from target

- get_pid_deadband:
  - op  : 253
  - arg : [id : UInt16]
  - ret : [lower: Double, upper: Double]
  - desc: Get temperature control pid deadband

- set_pid_invert:
  - op  : 254
  - arg : [id : UInt16, invert_source: Boolean, invert_drain: Boolean]
  - ret : null
  - desc: asd

- get_pid_deadband:
  - op  : 255
  - arg : [id : UInt16]
  - ret : [invert_source: Boolean, invert_drain: Boolean]
  - desc: asd

- set_bang2_param:
  - op  : 256
  - arg : [id : UInt16, lower_threshold: Double, upper_threshold: Double, invert_source: Boolean, invert_drain: Boolean]
  - ret : null
  - desc: Set temperature control pid deadband in Celcius relative from target

- get_bang2_param:
  - op  : 257
  - arg : [id : UInt16]
  - ret : [lower_threshold: Double, upper_threshold: Double, invert_source: Boolean, invert_drain: Boolean]
  - desc: Get temperature control pid deadband

- read_bang2_state:
  - op  : 258
  - arg : [id : UInt16]
  - ret : [s_state: Uint16, d_state: Uint16]
  - desc: Get control bang2 state

- read_pid_output:
  - op  : 259
  - arg : [id : UInt16]
  - ret : [output: Double]
  - desc: Get control pid output


# ------------------------------- TRINAMIC SPECIFIC ------------------------------------
- write_trinamic_register:
  - op : 260
  - arg: [id: Int16, address: UInt16, value: UInt32]
  - ret: null
  
- read_trinamic_register:
  - op : 261
  - arg: [id: Int16, address: UInt16]
  - ret: [value: UInt32]

- write_driver_register:
  - op : 262
  - arg: [id: Int16, address: UInt16, value: UInt32]
  - ret: null
  
- read_driver_register:
  - op : 263
  - arg: [id: Int16, address: UInt16]
  - ret: [value: UInt32]

- write_spi_encoder_register:
  - op : 264
  - arg: [id: Int16, address: UInt16, value: UInt32]
  - ret: null
  
- read_spi_encoder_register:
  - op : 265
  - arg: [id: Int16, address: UInt16]
  - ret: [value: Int32]

- set_stallguard_config:
  - op : 266
  - arg: [id: Int16, enable: Boolean, vel_threshold : Double, stall_offset : Int16]
  - ret: null
  
- get_stallguard_config:
  - op : 267
  - arg: [id: Int16]
  - ret: [enable: Boolean, vel_threshold : Double, stall_offset : Int16]
  
- read_stallguard_result:
  - op : 268
  - arg: [id: Int16]
  - ret: [result : Int16]
  
- set_stealthchop_config:
  - op : 269
  - arg: [id: Int16, enable: Boolean, use_spreadcycle: Boolean, vel_threshold: Double]
  - ret: null

- get_stealthchop_config:
  - op : 270
  - arg: [id: Int16]
  - ret: [enable: Boolean, use_spreadcycle: Boolean, vel_threshold: Double]
  
- set_stealthchop_params:
  - op : 271
  - arg: [id: Int16, pwm_ofs: UInt16, pwm_grad: UInt16]
  - ret: null

- get_stealthchop_params:
  - op : 272
  - arg: [id: Int16]
  - ret: [pwm_ofs: UInt16, pwm_grad: UInt16]
  
- set_auto_pwm_enable:
  - op : 273
  - arg: [id: Int16, enable : Boolean]
  - ret: null

- get_auto_pwm_enable:
  - op : 274
  - arg: [id: Int16]
  - ret: [enable : Boolean]

- set_trinamic_hardware_config:
  - op : 275
  - arg: [id: Int16, rsense : Double, clk_mhz : UInt16]
  - ret: null

- get_trinamic_hardware_config:
  - op : 276
  - arg: [id: Int16]
  - ret: [rsense : Double, clk_mhz : UInt16]

- set_trinamic_driver_type:
  - op : 277
  - arg: [id: Int16, driver_type : UInt16]
  - ret: null

- get_trinamic_driver_type:
  - op : 278
  - arg: [id: Int16]
  - ret: [driver_type : UInt16]

#- float_test:
#  - op : 277
#  - arg: [value: Float]
#  - ret: [value : Float]
#
- get_trinamic_version:
  - op : 6
  - arg: [id: Int16]
  - ret: [value: UInt32]

################################### CONTROLLER EXT 280 ~ 289 not used #################################################

################################### EVENTS #################################################
EVENTS:
- motor_move_started:
  - op  : 512
  - ret: [motor_id: Int16]
  - desc: Fired upon motor movement is started.

- motor_move_done:
  - op  : 513
  - ret: [motor_id: Int16, status: UInt16, position: Double]
  - desc: Fired upon motor movement is done, send the motor status and position. Check MotorStatusBitmask enum for motor status.

- motor_home_done:
  - op  : 514
  - ret: [motor_id: Int16, home_pos: Double, pos: Double]
  - desc: Fired upon motor homing is done, return abs_pos (absolute position), and pos (position after applying offset).

- motor_error_occured:
  - op  : 515
  - ret: [motor_id: Int16, motor_error_code: UInt16]
  - desc: Fired upon motor error is occured. Check MotorErrorCode enum for possible error code.

- max_out_reached:
  - op  : 516
  - ret: [motor_id: Int16]
  - desc: Fired upon motor current control maximum output control reached, this usually caused by not enough voltage to drive

- on_abs_encoder_average_finish:
  - op  : 517
  - ret: [id: Int16, pos: Double]
  - desc: Fired upon absolute encoder average position finish
  
- on_position_reached:
  - op : 518
  - ret: [motor_id: Int16, position: Double]

- on_input_changed:
  - op  : 801
  - ret: [input_id: UInt16, is_on: UInt16]
  - desc: Fired upon input monitor changed
  
- on_sensor_out_of_bound:
  - op  : 802
  - ret: [id: UInt16, limit_type: UInt16, value: Double]
  - desc: Fired upon sensor monitor out of counts

- on_servo_motion_finished:
  - op  : 803
  - ret: [id: UInt16, position: Double]
  - desc: Fired when spesific servo finished motion job

- on_sequencer_started:
  - op  : 805
  - ret: null
  - desc: Fired when sequencer feature started
  
- on_sequencer_aborted:
  - op  : 806
  - ret: [id: UInt32, uncompleted_count: UInt16]
  - desc: Fired when sequencer feature aborted
  
- on_sequencer_item_run:
  - op  : 807
  - ret: [id: UInt32]
  - desc: Fired when sequence item specified by id begin executes

- on_sequencer_item_finish:
  - op  : 808
  - ret: [id: UInt32]
  - desc: Fired when sequence item specified by id sucessfully executed

- on_sequencer_all_finish:
  - op  : 809
  - ret: null
  - desc: Fired when all sequences item sucessfully executed

- on_sequencer_fault:
  - op  : 810
  - ret: [id: UInt32, uncompleted_count: UInt16]
  - desc: Fired when sequencer fault (motor fault)

- on_timed_valve_action_start:
  - op  : 811
  - ret: [id: UInt16, isOpen: Boolean]
  - desc: Fired when timed valve with specified id and bit has started

- on_timed_valve_action_finish:
  - op  : 812
  - ret: [id: UInt16, isOpen: Boolean]
  - desc: Fired when timed valve with specified id and bit has finished

#- on_input_changed:
#  - op  : 801
#  - ret: [input_id: UInt16, is_on: UInt16]
#  - desc: Fired upon input monitor changed
#  
#- on_sensor_out_of_bound:
#  - op  : 802
#  - ret: [id: UInt16, limit_type: UInt16, value: Double]
#  - desc: Fired upon sensor monitor out of counds
#
#- on_servo_motion_finished:
#  - op  : 803
#  - ret: [id: UInt16, position: Double]
#  - desc: Fired when spesific servo finished motion job
#
#- on_rtc_alarm:
#  - op  : 804
#  - ret: [id: UInt16, hour: UInt16, minute: UInt16, second: UInt16]
#  - desc: Fired when RTC alarm occured
#  
#- on_ppi_started:
#  - op  : 805
#  - ret: null
#  - desc: Fired when PPI valve sequencer feature started
#  
#- on_ppi_aborted:
#  - op  : 806
#  - ret: [id: UInt32, uncompleted_count: UInt16]
#  - desc: Fired when PPI valve sequencer feature aborted
#  
#- on_ppi_queue_progress:
#  - op  : 807
#  - desc: Fired when PPI valve sequence item specified by id begin executes
#  - ret: [id: UInt32]
#  
#- on_ppi_queue_finish:
#  - op  : 808
#  - ret: [id: UInt32]
#  - desc: Fired when PPI valve sequence item specified by id sucessfully executed
#
#- on_ppi_all_queue_finish:
#  - op  : 809
#  - ret: null
#  - desc: Fired when all PPI valve sequences item sucessfully executed
#
#- on_timed_valve_action_start:
#  - op  : 810
#  - ret: [id: UInt16, isOpen: Boolean]
#  - desc: Fired when timed valve with specified id and bit has started
#
#- on_timed_valve_action_finish:
#  - op  : 811
#  - ret: [id: UInt16, isOpen: Boolean]
#  - desc: Fired when timed valve with specified id and bit has finished

